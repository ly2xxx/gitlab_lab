# GitLab CI/CD Pipeline for Child Pipeline Inheritance Component
# This pipeline tests and releases the component for the CI/CD catalog

stages:
  - validate
  - test
  - security
  - release
  - catalog

variables:
  # Component metadata
  COMPONENT_NAME: "child-pipeline-inheritance"
  COMPONENT_VERSION: "${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}"
  
  # Standardized echo functions for this pipeline
  ECHO_FUNCTIONS: |
    log_error() { echo -e "\033[31m[ERROR] ‚ùå $1\033[0m"; }
    log_warn() { echo -e "\033[33m[WARN] ‚ö†Ô∏è $1\033[0m"; }
    log_info() { echo -e "\033[32m[INFO] ‚ÑπÔ∏è $1\033[0m"; }
    log_debug() { echo -e "\033[34m[DEBUG] üîç $1\033[0m"; }

# Global before_script for all jobs
default:
  before_script:
    - eval "$ECHO_FUNCTIONS"
    - log_info "üöÄ Starting job- $CI_JOB_NAME"

# ============================================================================
# VALIDATION STAGE
# ============================================================================

validate-component-structure:
  stage: validate
  image: ubuntu:22.04
  script:
    - log_info "üìã Validating component project structure"
    
    # Check required files exist
    - log_debug "Checking for required files..."
    - test -f "templates/$COMPONENT_NAME/template.yml" || (log_error "Component template not found" && exit 1)
    - test -f "COMPONENT-README.md" || (log_error "Component README not found" && exit 1)
    - test -f "LICENSE.md" || (log_error "LICENSE file not found" && exit 1)
    
    # Validate template structure
    - log_debug "Validating template YAML structure..."
    - apt-get update && apt-get install -y python3-yaml
    - python3 -c "import yaml; yaml.safe_load(open('templates/$COMPONENT_NAME/template.yml'))" || (log_error "Invalid YAML syntax" && exit 1)
    
    # Check spec section exists
    - log_debug "Checking spec section..."
    - grep -q "spec:" "templates/$COMPONENT_NAME/template.yml" || (log_error "Missing spec section" && exit 1)
    - grep -q "inputs:" "templates/$COMPONENT_NAME/template.yml" || (log_error "Missing inputs section" && exit 1)
    
    - log_info "‚úÖ Component structure validation passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

validate-yaml-syntax:
  stage: validate
  image: ubuntu:22.04
  script:
    - log_info "üîç Validating YAML syntax for all files"
    
    - apt-get update && apt-get install -y python3-yaml
    
    # Validate component template
    - log_debug "Validating component template..."
    - python3 -c "import yaml; yaml.safe_load(open('templates/$COMPONENT_NAME/template.yml'))"
    
    # Validate this pipeline file
    - log_debug "Validating pipeline configuration..."
    - python3 -c "import yaml; yaml.safe_load(open('.gitlab-ci.yml'))"
    
    - log_info "‚úÖ YAML syntax validation passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# ============================================================================
# TESTING STAGE
# ============================================================================

test-component-inputs:
  stage: test
  image: ubuntu:22.04
  script:
    - log_info "üß™ Testing component input definitions"
    
    - apt-get update && apt-get install -y python3-yaml
    
    # Extract and validate inputs
    - |
      python3 << 'EOF'
      import yaml
      
      # Load component template
      with open('templates/child-pipeline-inheritance/template.yml') as f:
          component = yaml.safe_load(f)
      
      # Check spec structure
      if 'spec' not in component:
          print("‚ùå Missing spec section")
          exit(1)
      
      if 'inputs' not in component['spec']:
          print("‚ùå Missing inputs section")
          exit(1)
      
      inputs = component['spec']['inputs']
      expected_inputs = ['stage', 'enable_backend_build', 'enable_validation', 'docker_image']
      
      # Validate all expected inputs exist
      for inp in expected_inputs:
          if inp not in inputs:
              print(f"‚ùå Missing required input: {inp}")
              exit(1)
          if 'default' not in inputs[inp]:
              print(f"‚ùå Missing default value for input: {inp}")
              exit(1)
          print(f"‚úÖ Input '{inp}' properly defined with default: {inputs[inp]['default']}")
      
      print("‚úÖ All component inputs properly defined")
      EOF
    
    - log_info "‚úÖ Component input validation passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test-component-jobs:
  stage: test
  image: ubuntu:22.04
  script:
    - log_info "üîß Testing component job definitions"
    
    - apt-get update && apt-get install -y python3-yaml
    
    # Check component jobs are properly defined
    - |
      python3 << 'EOF'
      import yaml
      
      with open('templates/child-pipeline-inheritance/template.yml') as f:
          content = f.read()
          component = yaml.safe_load(content)
      
      # Expected component jobs
      expected_jobs = [
          'component-validate-syntax',
          'component-backend-build', 
          'component-generate-child-pipeline',
          'component-trigger-dynamic-child'
      ]
      
      # Check each job exists and has required fields
      for job in expected_jobs:
          if job not in component:
              print(f"‚ùå Missing component job: {job}")
              exit(1)
          
          job_def = component[job]
          if 'stage' not in job_def:
              print(f"‚ùå Job {job} missing stage definition")
              exit(1)
          if 'script' not in job_def:
              print(f"‚ùå Job {job} missing script definition")
              exit(1)
          
          print(f"‚úÖ Job '{job}' properly defined")
      
      # Check for input usage
      if '$[[ inputs.' not in content:
          print("‚ùå Component doesn't use any inputs")
          exit(1)
      
      print("‚úÖ All component jobs properly defined")
      EOF
    
    - log_info "‚úÖ Component job validation passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test-documentation:
  stage: test
  image: ubuntu:22.04
  script:
    - log_info "üìö Testing component documentation"
    
    # Check README has required sections
    - log_debug "Checking README content..."
    - grep -q "# Child Pipeline Inheritance Component" COMPONENT-README.md || (log_error "Missing component title" && exit 1)
    - grep -q "## Quick Start" COMPONENT-README.md || (log_error "Missing Quick Start section" && exit 1)
    - grep -q "## Configuration" COMPONENT-README.md || (log_error "Missing Configuration section" && exit 1)
    - grep -q "Input Parameters" COMPONENT-README.md || (log_error "Missing Input Parameters table" && exit 1)
    
    # Check for usage examples
    - grep -q "```yaml" COMPONENT-README.md || (log_error "Missing YAML examples" && exit 1)
    
    - log_info "‚úÖ Documentation validation passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# ============================================================================
# SECURITY STAGE
# ============================================================================

security-scan:
  stage: security
  image: ubuntu:22.04
  script:
    - log_info "üîí Running security checks on component"
    
    # Check for hardcoded secrets or sensitive data
    - log_debug "Scanning for hardcoded secrets..."
    - ! grep -r -i "password\|secret\|token\|key" templates/ || (log_warn "Potential secrets found, please review")
    
    # Check for dangerous commands
    - log_debug "Scanning for dangerous commands..."
    - ! grep -r "rm -rf /\|format\|mkfs" templates/ || (log_error "Dangerous commands found" && exit 1)
    
    # Validate shell scripts if any
    - log_debug "Checking shell syntax..."
    - apt-get update && apt-get install -y shellcheck || true
    - find . -name "*.sh" -exec shellcheck {} \; || log_warn "Shell script warnings found"
    
    - log_info "‚úÖ Security scan completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# ============================================================================
# RELEASE STAGE
# ============================================================================

create-release:
  stage: release
  image: alpine:latest
  script:
    - log_info "üì¶ Creating component release"
    
    - apk add --no-cache git
    
    # Validate this is a proper semantic version tag
    - log_debug "Validating semantic version tag- $CI_COMMIT_TAG"
    - echo "$CI_COMMIT_TAG" | grep -E "^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?$" || (log_error "Invalid semantic version tag" && exit 1)
    
    # Create release artifacts
    - log_debug "Creating release package..."
    - mkdir -p release-artifacts
    - cp -r templates release-artifacts/
    - cp COMPONENT-README.md release-artifacts/README.md
    - cp LICENSE.md release-artifacts/
    - echo "$CI_COMMIT_TAG" > release-artifacts/VERSION
    
    # Create release notes
    - |
      cat > release-artifacts/RELEASE-NOTES.md << EOF
      # Child Pipeline Inheritance Component ${CI_COMMIT_TAG}
      
      ## Release Information
      - **Version**: ${CI_COMMIT_TAG}
      - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
      - **Commit**: ${CI_COMMIT_SHA}
      - **Pipeline**: ${CI_PIPELINE_URL}
      
      ## Component Features
      - Dynamic child pipeline generation
      - Java-style standardized logging
      - Multi-technology detection (frontend, backend, infrastructure)
      - Variable inheritance between parent and child pipelines
      - Configurable job execution
      
      ## Usage
      \`\`\`yaml
      include:
        - component: \$CI_SERVER_FQDN/\$CI_PROJECT_NAMESPACE/\$CI_PROJECT_NAME/child-pipeline-inheritance@${CI_COMMIT_TAG}
      \`\`\`
      
      ## Changes in this Release
      See the project's CHANGELOG or commit history for detailed changes.
      EOF
    
    - log_info "‚úÖ Release package created for $CI_COMMIT_TAG"
  artifacts:
    paths:
      - release-artifacts/
    expire_in: 30 days
  rules:
    - if: $CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+\.[0-9]+/

# ============================================================================
# CATALOG STAGE
# ============================================================================

publish-to-catalog:
  stage: catalog
  image: alpine:latest
  script:
    - log_info "üåê Publishing component to CI/CD catalog"
    
    # This job would typically handle catalog publication
    # For GitLab.com, this might involve API calls or specific procedures
    # For self-hosted GitLab, this might involve different steps
    
    - log_debug "Component- $COMPONENT_NAME"
    - log_debug "Version- $CI_COMMIT_TAG"
    - log_debug "Project- $CI_PROJECT_PATH"
    
    # Validate release artifacts exist
    - test -d release-artifacts || (log_error "Release artifacts not found" && exit 1)
    - test -f release-artifacts/templates/child-pipeline-inheritance/template.yml || (log_error "Component template not found in release" && exit 1)
    
    - log_info "üìã Component ready for catalog publication"
    - log_info "üìç Component URL- $CI_SERVER_URL/$CI_PROJECT_PATH/-/tree/$CI_COMMIT_TAG"
    - log_info "üîó Usage- \$CI_SERVER_FQDN/$CI_PROJECT_PATH/child-pipeline-inheritance@$CI_COMMIT_TAG"
    
    - log_info "‚úÖ Component published to catalog"
  dependencies:
    - create-release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+\.[0-9]+/

# ============================================================================
# CLEANUP AND NOTIFICATIONS
# ============================================================================

pipeline-summary:
  stage: catalog
  image: alpine:latest
  script:
    - log_info "üìä Pipeline Summary"
    - log_info "Pipeline ID- $CI_PIPELINE_ID"
    - log_info "Commit- $CI_COMMIT_SHA"
    - log_info "Branch/Tag- ${CI_COMMIT_TAG:-$CI_COMMIT_REF_NAME}"
    - log_info "Project- $CI_PROJECT_PATH"
    
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        log_info "üéâ Release pipeline completed successfully!"
        log_info "üì¶ Component version $CI_COMMIT_TAG is now available"
        log_info "üîó Include with: \$CI_SERVER_FQDN/$CI_PROJECT_PATH/child-pipeline-inheritance@$CI_COMMIT_TAG"
      else
        log_info "‚úÖ Development pipeline completed successfully!"
      fi
  rules:
    - when: always