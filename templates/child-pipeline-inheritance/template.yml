# GitLab Component: Child Pipeline Inheritance
# Version: 1.0.0
# Author: GitLab CI/CD Labs
# Description: Provides dynamic child pipeline generation with inheritance capabilities and standardized logging
# Documentation: https://gitlab.com/components/child-pipeline-inheritance
# 
# This component automatically generates child pipelines based on repository changes,
# provides Java-style logging, and enables variable inheritance between parent and child pipelines.

spec:
  inputs:
    stage:
      description: "Pipeline stage for child pipeline jobs"
      default: "maintenance"
    enable_backend_build:
      description: "Enable backend build job"
      default: "true"
    enable_validation:
      description: "Enable syntax validation job"  
      default: "true"
    docker_image:
      description: "Docker image for pipeline generation"
      default: "ubuntu:latest"

# Component variables including echo functions
variables:
  # Standardized echo functions for logging
  ECHO_FUNCTIONS: |
    log_error() { echo -e "\033[31m[ERROR] ❌ $1\033[0m"; }
    log_warn() { echo -e "\033[33m[WARN] ⚠️ $1\033[0m"; }
    log_info() { echo -e "\033[32m[INFO] ℹ️ $1\033[0m"; }
    log_debug() { echo -e "\033[34m[DEBUG] 🔍 $1\033[0m"; }

# Component jobs
component-validate-syntax:
  stage: $[[ inputs.stage ]]
  script:
    - eval "$ECHO_FUNCTIONS"
    - log_info "🚀 Pipeline started - ID- $CI_PIPELINE_ID"
    - log_info "Validating YAML syntax and basic checks"
    - log_debug "Checking for required files..."
    - ls -la
    - log_info "✅ Validation complete"
  rules:
    - if: $[[ inputs.enable_validation ]] == "true"
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

component-backend-build:
  stage: $[[ inputs.stage ]]
  script:
    - eval "$ECHO_FUNCTIONS"
    - log_info "🔨 Building backend API"
    - mkdir -p dist/backend
    - echo "Backend API ready" > dist/backend/app.jar
    - log_info "✅ Backend API build completed"
  artifacts:
    paths:
      - dist/backend/
    expire_in: 1 hour
  rules:
    - if: $[[ inputs.enable_backend_build ]] == "true"
      changes:
        - "backend/**/*"
        - "requirements.txt"
      when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

component-generate-child-pipeline:
  stage: $[[ inputs.stage ]]
  image: $[[ inputs.docker_image ]]
  script:
    - eval "$ECHO_FUNCTIONS"
    - log_info "📋 Generating dynamic child pipeline configuration"
    - log_debug "Working directory- $(pwd)"
    - log_debug "Project directory- $CI_PROJECT_DIR"
    - apt-get update && apt-get install -y dos2unix
    
    # Generate the child pipeline configuration
    - |
      PIPELINE_FILE="$CI_PROJECT_DIR/generated-child-pipeline.yml"
      GENERATION_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
      
      log_info "Creating child pipeline configuration..."
      
      # Create basic pipeline structure
      cat > $PIPELINE_FILE << 'PIPELINE_EOF'
      # Dynamically Generated Child Pipeline
      # Generated by: Child Pipeline Inheritance Component
      
      stages:
        - dynamic-analyze
        - dynamic-build
        - dynamic-test
        - dynamic-deploy
      
      variables:
        CHILD_PIPELINE_TYPE: "dynamic"
        ECHO_FUNCTIONS: |
          log_error() { echo -e "\033[31m[ERROR] ❌ $1\033[0m"; }
          log_warn() { echo -e "\033[33m[WARN] ⚠️ $1\033[0m"; }
          log_info() { echo -e "\033[32m[INFO] ℹ️ $1\033[0m"; }
          log_debug() { echo -e "\033[34m[DEBUG] 🔍 $1\033[0m"; }
      
      default:
        before_script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🔗 Dynamic Child Pipeline - ID- $CI_PIPELINE_ID"
          - log_info "📋 Parent Pipeline ID- $PARENT_PIPELINE_ID"
      
      # Analysis job - always included
      dynamic-analyze-changes:
        stage: dynamic-analyze
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🔍 Analyzing changes for dynamic pipeline"
          - log_debug "Commit SHA- $CI_COMMIT_SHA"
          - log_debug "Branch- $CI_COMMIT_REF_NAME"
          - git diff --name-only HEAD~1 HEAD || log_warn "No previous commit to compare"
        artifacts:
          paths:
            - change-analysis.txt
          expire_in: 1 hour
      PIPELINE_EOF
      
    # Check for frontend changes and add frontend jobs
    - |
      if [ -d "frontend" ] || ls *.html *.css *.js 2>/dev/null || [ -f "package.json" ]; then
        log_info "🎨 Frontend changes detected, adding frontend jobs"
        
        cat >> $PIPELINE_FILE << 'FRONTEND_EOF'
      
      dynamic-build-frontend:
        stage: dynamic-build
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🎨 Building frontend components dynamically"
          - mkdir -p dynamic-build/frontend
          - echo 'Frontend built dynamically' > dynamic-build/frontend/app.js
          - log_info "✅ Frontend build completed"
        artifacts:
          paths:
            - dynamic-build/frontend/
          expire_in: 30 minutes
        needs:
          - dynamic-analyze-changes
      
      dynamic-test-frontend:
        stage: dynamic-test
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🧪 Testing frontend components"
          - log_debug "Running frontend tests..."
          - log_info "✅ Frontend tests passed"
        needs:
          - dynamic-build-frontend
      FRONTEND_EOF
      fi
      
    # Check for backend changes and add backend jobs
    - |
      if [ -d "backend" ] || ls *.py *.java *.go 2>/dev/null || [ -f "requirements.txt" ] || [ -f "pom.xml" ]; then
        log_info "⚙️ Backend changes detected, adding backend jobs"
        
        cat >> $PIPELINE_FILE << 'BACKEND_EOF'
      
      dynamic-build-backend:
        stage: dynamic-build
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "⚙️ Building backend services dynamically"
          - mkdir -p dynamic-build/backend
          - echo 'Backend API ready' > dynamic-build/backend/app.jar
          - log_info "✅ Backend build completed"
        artifacts:
          paths:
            - dynamic-build/backend/
          expire_in: 30 minutes
        needs:
          - dynamic-analyze-changes
      
      dynamic-test-backend:
        stage: dynamic-test
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🧪 Testing backend services"
          - log_debug "Running API tests..."
          - log_debug "Running database tests..."
          - log_info "✅ Backend tests passed"
        needs:
          - dynamic-build-backend
      BACKEND_EOF
      fi
      
    # Check for infrastructure changes and add infrastructure jobs
    - |
      if [ -d "infrastructure" ] || ls Dockerfile* docker-compose*.yml 2>/dev/null || [ -d "kubernetes" ] || [ -d "terraform" ]; then
        log_info "🏗️ Infrastructure changes detected, adding infrastructure jobs"
        
        cat >> $PIPELINE_FILE << 'INFRA_EOF'
      
      dynamic-build-infrastructure:
        stage: dynamic-build
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🏗️ Processing infrastructure changes"
          - log_debug "Validating Docker configurations..."
          - log_debug "Checking Kubernetes manifests..."
          - log_info "✅ Infrastructure validation completed"
        needs:
          - dynamic-analyze-changes
      
      dynamic-deploy-infrastructure:
        stage: dynamic-deploy
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🚀 Deploying infrastructure changes"
          - log_debug "This would deploy infrastructure updates"
          - log_info "✅ Infrastructure deployment completed"
        needs:
          - dynamic-build-infrastructure
      INFRA_EOF
      fi
      
    # Check if it's a main branch - add production deployment
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        log_info "🎯 Main branch detected, adding production deployment"
        
        cat >> $PIPELINE_FILE << 'PROD_EOF'
      
      dynamic-deploy-production:
        stage: dynamic-deploy
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "🚀 Production deployment (dynamically generated)"
          - log_debug "Deploying to production environment..."
          - log_debug "Running smoke tests..."
          - log_info "✅ Production deployment completed"
        rules:
          - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
            when: manual
        environment:
          name: production-dynamic
          url: https://prod-dynamic.example.com
      PROD_EOF
      fi
      
    # Add a summary job that runs always
    - |
      cat >> $PIPELINE_FILE << 'SUMMARY_EOF'
      
      dynamic-pipeline-summary:
        stage: dynamic-deploy
        script:
          - eval "$ECHO_FUNCTIONS"
          - log_info "📊 Dynamic Pipeline Summary"
        rules:
          - when: always
      SUMMARY_EOF
      
    - log_info "✅ Dynamic child pipeline configuration generated- $PIPELINE_FILE"
    - log_debug "📄 Pipeline content preview:"
    - head -20 $PIPELINE_FILE
    - log_info "🎉 Dynamic pipeline generation completed!"
    
  artifacts:
    paths:
      - generated-child-pipeline.yml
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

component-trigger-dynamic-child:
  stage: $[[ inputs.stage ]]
  trigger:
    include:
      - artifact: generated-child-pipeline.yml
        job: component-generate-child-pipeline
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    CHILD_TYPE: "dynamic"
  needs:
    - job: component-generate-child-pipeline
      artifacts: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"