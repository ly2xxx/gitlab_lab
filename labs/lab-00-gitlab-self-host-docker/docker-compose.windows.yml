version: '3.8'

# Windows-optimized Docker Compose configuration for GitLab CE
# This configuration is specifically optimized for Windows 11 with Docker Desktop

services:
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    restart: always
    hostname: 'gitlab'
    container_name: gitlab-ce
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        # External URL configuration
        external_url 'https://localhost'
        
        # GitLab Rails configuration
        gitlab_rails['gitlab_shell_ssh_port'] = 2224
        gitlab_rails['time_zone'] = 'UTC'
        
        # Container Registry configuration
        registry_external_url 'https://localhost:5050'
        gitlab_rails['registry_enabled'] = true
        
        # CI/CD configuration
        gitlab_ci['gitlab_ci_all_broken_builds'] = true
        gitlab_ci['gitlab_ci_add_pusher'] = true
        
        # Performance tuning for Windows/Docker Desktop
        postgresql['shared_preload_libraries'] = 'pg_stat_statements'
        postgresql['max_connections'] = 200
        postgresql['shared_buffers'] = "128MB"
        
        # Disable unused services for better Windows performance
        alertmanager['enable'] = false
        node_exporter['enable'] = false
        redis_exporter['enable'] = false
        postgres_exporter['enable'] = false
        gitlab_exporter['enable'] = false
        
        # Email configuration (disabled for development)
        gitlab_rails['smtp_enable'] = false
        
        # Security settings
        nginx['redirect_http_to_https'] = true
        nginx['ssl_certificate'] = "/etc/gitlab/ssl/gitlab.crt"
        nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/gitlab.key"
        nginx['ssl_protocols'] = "TLSv1.2 TLSv1.3"
        
        # Backup configuration
        gitlab_rails['backup_keep_time'] = 604800
        gitlab_rails['backup_path'] = '/var/opt/gitlab/backups'
        
        # Git configuration
        gitlab_rails['gitlab_shell_git_timeout'] = 800
        
        # Windows-specific optimizations
        unicorn['worker_timeout'] = 60
        unicorn['worker_processes'] = 2
        
    ports:
      - '80:80'      # HTTP
      - '443:443'    # HTTPS
      - '2224:22'    # SSH
      - '5050:5050'  # Container Registry
    volumes:
      # Windows Docker Desktop - using current directory for simplicity
      - './gitlab-data/config:/etc/gitlab'
      - './gitlab-data/logs:/var/log/gitlab'
      - './gitlab-data/data:/var/opt/gitlab'
      - './config/ssl:/etc/gitlab/ssl'
    shm_size: '256m'
    ulimits:
      sigpending: 62793
      nproc: 131072
      nofile: 60000
      core: 0
    healthcheck:
      test: ["CMD", "/opt/gitlab/bin/gitlab-healthcheck", "--fail", "--max-time", "10"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s  # Extended for Windows
    networks:
      - gitlab-network

  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    restart: always
    container_name: gitlab-runner
    volumes:
      - './config/runner:/etc/gitlab-runner'
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - gitlab
    networks:
      - gitlab-network
    command: |
      sh -c '
        # Wait for GitLab to be ready (longer timeout for Windows)
        echo "Waiting for GitLab to be ready..."
        timeout=600
        count=0
        until curl -k -s https://gitlab >/dev/null 2>&1; do
          if [ $$count -ge $$timeout ]; then
            echo "Timeout waiting for GitLab"
            exit 1
          fi
          echo "Still waiting... ($$count/$$timeout)"
          sleep 10
          count=$$((count + 10))
        done
        echo "GitLab is ready, starting runner..."
        gitlab-runner run --user=gitlab-runner --working-directory=/home/gitlab-runner
      '

networks:
  gitlab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16