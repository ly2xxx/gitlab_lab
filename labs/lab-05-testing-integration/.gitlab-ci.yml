# Comprehensive testing pipeline
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

variables:
  NODE_VERSION: "18"
  POSTGRES_DB: "test_db"
  POSTGRES_USER: "test_user"
  POSTGRES_PASSWORD: "test_pass"
  REDIS_URL: "redis://redis:6379"

stages:
  - setup
  - lint
  - test-unit
  - test-integration
  - test-e2e
  - security
  - quality-gate
  - performance

# Setup and dependency installation
install-dependencies:
  stage: setup
  image: node:$NODE_VERSION
  script:
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - node_modules/
      - .npm/
    expire_in: 1 hour
  cache:
    key: "$CI_COMMIT_REF_SLUG-$NODE_VERSION"
    paths:
      - .npm/

# Code quality checks
lint-code:
  stage: lint
  image: node:$NODE_VERSION
  script:
    - npm run lint
    - npm run lint -- --format junit --output-file lint-report.xml
  artifacts:
    reports:
      junit: lint-report.xml
  dependencies:
    - install-dependencies

# Unit testing with coverage
unit-tests:
  stage: test-unit
  image: node:$NODE_VERSION
  script:
    - npm run test:coverage
  artifacts:
    reports:
      junit: coverage/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  coverage: '/Lines\s*:\s*(\d+\.?\d*)\%/'
  dependencies:
    - install-dependencies

# Parallel unit tests for faster execution
unit-tests-parallel:
  stage: test-unit
  image: node:$NODE_VERSION
  script:
    - npm run test:unit -- --maxWorkers=4 --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL
  parallel: 4
  dependencies:
    - install-dependencies
  except:
    - main  # Run full coverage on main branch

# Integration tests with services
integration-tests:
  stage: test-integration
  image: node:$NODE_VERSION
  services:
    - postgres:13-alpine
    - redis:7-alpine
  variables:
    DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB"
  script:
    - echo "Waiting for services to be ready..."
    - sleep 10
    - npm run test:integration
  artifacts:
    reports:
      junit: coverage/integration-junit.xml
    when: always
  dependencies:
    - install-dependencies

# End-to-end tests
e2e-tests:
  stage: test-e2e
  image: cypress/included:12.17.4
  services:
    - name: node:$NODE_VERSION
      alias: app
      command: ["npm", "start"]
  variables:
    CYPRESS_baseUrl: "http://app:3000"
  script:
    - echo "Waiting for application to start..."
    - sleep 30
    - cypress run --reporter junit --reporter-options "mochaFile=cypress-report.xml"
  artifacts:
    reports:
      junit: cypress-report.xml
    paths:
      - cypress/screenshots/
      - cypress/videos/
    when: always
    expire_in: 1 week
  dependencies:
    - install-dependencies

# Mutation testing for test quality
mutation-testing:
  stage: test-unit
  image: node:$NODE_VERSION
  script:
    - npm run test:mutation
  artifacts:
    paths:
      - reports/mutation/
    expire_in: 1 week
  allow_failure: true
  dependencies:
    - install-dependencies
  only:
    - main
    - develop

# Security audit
security-audit:
  stage: security
  image: node:$NODE_VERSION
  script:
    - npm audit --audit-level moderate
    - npm audit --json > security-audit.json
  artifacts:
    reports:
      dependency_scanning: security-audit.json
    when: always
  allow_failure: true
  dependencies:
    - install-dependencies

# Advanced quality gate with custom rules
quality-gate:
  stage: quality-gate
  image: node:$NODE_VERSION
  script:
    - echo "Evaluating quality metrics..."
    
    # Check test coverage
    - |
      COVERAGE=$(grep -o 'Lines.*: [0-9.]*' coverage/lcov-report/index.html | grep -o '[0-9.]*' | head -1)
      echo "Code coverage: $COVERAGE%"
      if (( $(echo "$COVERAGE < 80" | bc -l) )); then
        echo "❌ Coverage below threshold (80%)"
        exit 1
      fi
    
    # Check for test count
    - |
      TEST_COUNT=$(grep -o '"numTotalTests":[0-9]*' coverage/test-results.json | grep -o '[0-9]*')
      echo "Total tests: $TEST_COUNT"
      if [ "$TEST_COUNT" -lt 10 ]; then
        echo "❌ Insufficient test count (minimum 10)"
        exit 1
      fi
    
    # Check for critical vulnerabilities
    - |
      if [ -f security-audit.json ]; then
        CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical' security-audit.json)
        if [ "$CRITICAL_VULNS" != "0" ] && [ "$CRITICAL_VULNS" != "null" ]; then
          echo "❌ Critical security vulnerabilities found: $CRITICAL_VULNS"
          exit 1
        fi
      fi
    
    - echo "✅ All quality gates passed"
  dependencies:
    - unit-tests
    - security-audit

# Performance testing
performance-tests:
  stage: performance
  image: node:$NODE_VERSION
  services:
    - name: node:$NODE_VERSION
      alias: app
      command: ["npm", "start"]
  script:
    - npm install -g artillery
    - echo "Waiting for application..."
    - sleep 30
    - artillery run tests/performance/load-test.yml --output performance-report.json
    - artillery report performance-report.json
  artifacts:
    paths:
      - performance-report.json
      - performance-report.html
    expire_in: 1 week
  dependencies:
    - install-dependencies
  only:
    - main
    - develop