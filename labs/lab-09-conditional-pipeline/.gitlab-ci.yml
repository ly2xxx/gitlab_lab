# Lab 9: Conditional Pipeline Execution
# Demonstrates smart CI/CD that only runs relevant tests based on file changes

# Include additional pipeline configurations
include:
  - local: 'labs/lab-09-conditional-pipeline/ci/variables.yml'
  - local: 'labs/lab-09-conditional-pipeline/ci/templates.yml'

stages:
  - detect-changes
  - validate
  - test-conditional
  - test-advanced
  - integration
  - report

variables:
  # Ensure enough git history for change detection
  GIT_DEPTH: 50
  # Pipeline optimization settings
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fastest"

# =============================================================================
# STEP 1: BASIC CONDITIONAL EXECUTION
# =============================================================================

# Basic Python pipeline testing
test-python-basic:
  stage: test-conditional
  image: python:3.9-slim
  script:
    - echo "=== Testing Python Pipeline Templates ==="
    - echo "Python version: $(python --version)"
    - echo "Testing templates in: templates/python/"
    - ls -la templates/python/ || echo "No Python templates found"
    - echo "Running Python-specific pipeline validation..."
    - ./labs/lab-09-conditional-pipeline/scripts/test-python-pipelines.sh
  rules:
    - changes:
        - "templates/python/**/*"
        - "shared/python/**/*"
        - "labs/lab-09-conditional-pipeline/scripts/test-python-pipelines.sh"
      when: always
  artifacts:
    reports:
      junit: "test-results/python/junit.xml"
    paths:
      - "test-results/python/"
    expire_in: 1 day
    when: always

# Basic Node.js pipeline testing  
test-nodejs-basic:
  stage: test-conditional
  image: node:16-slim
  script:
    - echo "=== Testing Node.js Pipeline Templates ==="
    - echo "Node.js version: $(node --version)"
    - echo "NPM version: $(npm --version)"
    - echo "Testing templates in: templates/nodejs/"
    - ls -la templates/nodejs/ || echo "No Node.js templates found"
    - echo "Running Node.js-specific pipeline validation..."
    - ./labs/lab-09-conditional-pipeline/scripts/test-nodejs-pipelines.sh
  rules:
    - changes:
        - "templates/nodejs/**/*"
        - "shared/nodejs/**/*"
        - "labs/lab-09-conditional-pipeline/scripts/test-nodejs-pipelines.sh"
      when: always
  artifacts:
    reports:
      junit: "test-results/nodejs/junit.xml"
    paths:
      - "test-results/nodejs/"
    expire_in: 1 day
    when: always

# Basic Java pipeline testing
test-java-basic:
  stage: test-conditional
  image: openjdk:11-slim
  script:
    - echo "=== Testing Java Pipeline Templates ==="
    - echo "Java version: $(java -version 2>&1 | head -1)"
    - echo "Testing templates in: templates/java/"
    - ls -la templates/java/ || echo "No Java templates found"
    - echo "Running Java-specific pipeline validation..."
    - ./labs/lab-09-conditional-pipeline/scripts/test-java-pipelines.sh
  rules:
    - changes:
        - "templates/java/**/*"
        - "shared/java/**/*"  
        - "labs/lab-09-conditional-pipeline/scripts/test-java-pipelines.sh"
      when: always
  artifacts:
    reports:
      junit: "test-results/java/junit.xml"
    paths:
      - "test-results/java/"
    expire_in: 1 day
    when: always

# =============================================================================
# STEP 2: DYNAMIC CHANGE DETECTION
# =============================================================================

# Dynamic change detection job
detect-changes:
  stage: detect-changes
  image: alpine/git:latest
  before_script:
    - apk add --no-cache bash curl jq
    - echo "Git configuration:"
    - git --version
    - echo "Current branch: $CI_COMMIT_REF_NAME"
    - echo "Target branch: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
  script:
    - |
      echo "=== Dynamic Change Detection ==="
      
      # Set comparison base
      if [ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_SHA" ]; then
        BASE_SHA="$CI_MERGE_REQUEST_TARGET_BRANCH_SHA"
        echo "Using MR target branch SHA: $BASE_SHA"
      else
        BASE_SHA="HEAD~1"
        echo "Using previous commit: $BASE_SHA"
      fi
      
      # Function to check changes
      check_changes() {
        local dir_pattern=$1
        local var_name=$2
        echo "Checking changes in: $dir_pattern"
        
        if git diff --name-only "$BASE_SHA"..HEAD | grep -E "$dir_pattern" > /dev/null; then
          echo "$var_name=true" >> build.env
          echo "✓ $var_name: Changes detected"
          
          # List changed files
          echo "Changed files in $dir_pattern:"
          git diff --name-only "$BASE_SHA"..HEAD | grep -E "$dir_pattern" | sed 's/^/  - /'
        else
          echo "$var_name=false" >> build.env
          echo "✗ $var_name: No changes"
        fi
      }
      
      # Initialize environment file
      echo "# Dynamic change detection results" > build.env
      echo "DETECTION_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build.env
      echo "BASE_SHA=$BASE_SHA" >> build.env
      echo "CURRENT_SHA=$CI_COMMIT_SHA" >> build.env
      
      # Check each component
      check_changes "templates/python|shared/python" "PYTHON_CHANGED"
      check_changes "templates/nodejs|shared/nodejs" "NODEJS_CHANGED"  
      check_changes "templates/java|shared/java" "JAVA_CHANGED"
      check_changes "shared/common" "SHARED_CHANGED"
      check_changes "\.gitlab-ci\.yml" "CI_CONFIG_CHANGED"
      
      echo ""
      echo "=== Final Detection Results ==="
      cat build.env
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - build.env
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH != "main"
    - if: $CI_PIPELINE_SOURCE == "push"

# Dynamic conditional jobs
test-python-dynamic:
  stage: test-advanced
  image: python:3.9-slim
  script:
    - echo "=== Python Dynamic Testing (Triggered by Change Detection) ==="
    - echo "Python changed: $PYTHON_CHANGED"
    - echo "Shared changed: $SHARED_CHANGED"
    - echo "Detection timestamp: $DETECTION_TIMESTAMP"
    - ./labs/lab-09-conditional-pipeline/scripts/test-python-pipelines.sh
  rules:
    - if: '$PYTHON_CHANGED == "true" || $SHARED_CHANGED == "true"'
  needs:
    - job: detect-changes
      artifacts: true

test-nodejs-dynamic:
  stage: test-advanced
  image: node:16-slim
  script:
    - echo "=== Node.js Dynamic Testing (Triggered by Change Detection) ==="
    - echo "Node.js changed: $NODEJS_CHANGED"
    - echo "Shared changed: $SHARED_CHANGED"
    - echo "Detection timestamp: $DETECTION_TIMESTAMP"
    - ./labs/lab-09-conditional-pipeline/scripts/test-nodejs-pipelines.sh
  rules:
    - if: '$NODEJS_CHANGED == "true" || $SHARED_CHANGED == "true"'
  needs:
    - job: detect-changes
      artifacts: true

test-java-dynamic:
  stage: test-advanced
  image: openjdk:11-slim
  script:
    - echo "=== Java Dynamic Testing (Triggered by Change Detection) ==="
    - echo "Java changed: $JAVA_CHANGED"
    - echo "Shared changed: $SHARED_CHANGED"
    - echo "Detection timestamp: $DETECTION_TIMESTAMP"
    - ./labs/lab-09-conditional-pipeline/scripts/test-java-pipelines.sh
  rules:
    - if: '$JAVA_CHANGED == "true" || $SHARED_CHANGED == "true"'
  needs:
    - job: detect-changes
      artifacts: true

# =============================================================================
# STEP 3: ADVANCED CONDITIONAL PATTERNS
# =============================================================================

# Advanced Python testing with multiple conditions
test-python-advanced:
  stage: test-advanced
  image: python:3.9-slim
  script:
    - echo "=== Advanced Python Testing ==="
    - echo "Pipeline source: $CI_PIPELINE_SOURCE"
    - echo "Branch: $CI_COMMIT_REF_NAME"
    - echo "MR ID: $CI_MERGE_REQUEST_ID"
    - ./labs/lab-09-conditional-pipeline/scripts/test-python-pipelines.sh
  rules:
    # Run on Python changes in feature branches
    - if: $CI_COMMIT_BRANCH != "main"
      changes:
        - "templates/python/**/*"
        - "shared/python/**/*"
      when: always
    # Always run on main branch for Python changes
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - "templates/python/**/*"
      when: always
    # Manual trigger option
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true
  artifacts:
    reports:
      junit: "test-results/python-advanced/junit.xml"
    paths:
      - "test-results/python-advanced/"
    expire_in: 1 day

# Handle shared dependencies affecting all languages
test-all-on-shared-changes:
  stage: test-advanced
  image: alpine:latest
  before_script:
    - apk add --no-cache bash
  script:
    - echo "=== Testing All Languages Due to Shared Changes ==="
    - echo "Shared component or CI config changed, running comprehensive tests"
    - echo "Language: $LANGUAGE"
    - ./labs/lab-09-conditional-pipeline/scripts/test-${LANGUAGE}-pipelines.sh
  parallel:
    matrix:
      - LANGUAGE: [python, nodejs, java]
  rules:
    - changes:
        - ".gitlab-ci.yml"
        - "shared/common/**/*"
        - "labs/lab-09-conditional-pipeline/scripts/common/**/*"
  artifacts:
    reports:
      junit: "test-results/shared-${LANGUAGE}/junit.xml"
    paths:
      - "test-results/shared-${LANGUAGE}/"
    expire_in: 1 day

# =============================================================================
# STEP 4: CHILD PIPELINE TRIGGERS
# =============================================================================

# Trigger Python child pipeline
trigger-python-child:
  stage: test-advanced
  trigger:
    include: 
      - local: 'labs/lab-09-conditional-pipeline/ci/python-pipeline.yml'
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    TRIGGER_SOURCE: "conditional-execution"
  rules:
    - changes:
        - "templates/python/**/*"
        - "shared/python/**/*"
      when: always

# Trigger Node.js child pipeline
trigger-nodejs-child:
  stage: test-advanced
  trigger:
    include: 
      - local: 'labs/lab-09-conditional-pipeline/ci/nodejs-pipeline.yml'
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    TRIGGER_SOURCE: "conditional-execution"
  rules:
    - changes:
        - "templates/nodejs/**/*"
        - "shared/nodejs/**/*"
      when: always

# Trigger Java child pipeline
trigger-java-child:
  stage: test-advanced
  trigger:
    include: 
      - local: 'labs/lab-09-conditional-pipeline/ci/java-pipeline.yml'
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    TRIGGER_SOURCE: "conditional-execution"
  rules:
    - changes:
        - "templates/java/**/*"
        - "shared/java/**/*"
      when: always

# Trigger all child pipelines on shared changes
trigger-all-children:
  stage: test-advanced
  trigger:
    include:
      - local: 'labs/lab-09-conditional-pipeline/ci/python-pipeline.yml'
      - local: 'labs/lab-09-conditional-pipeline/ci/nodejs-pipeline.yml'
      - local: 'labs/lab-09-conditional-pipeline/ci/java-pipeline.yml'
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    TRIGGER_SOURCE: "shared-changes"
  rules:
    - changes:
        - "shared/common/**/*"
        - ".gitlab-ci.yml"
      when: always

# =============================================================================
# STEP 5: PERFORMANCE OPTIMIZATIONS
# =============================================================================

# Cached validation template
.cache-template: &cache-template
  cache:
    key: "conditional-pipeline-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    paths:
      - .validation-cache/
      - node_modules/
      - .venv/
      - .gradle/
    policy: pull-push

# Optimized Python testing with caching
test-python-optimized:
  stage: test-advanced
  image: python:3.9-slim
  <<: *cache-template
  before_script:
    - mkdir -p .validation-cache test-results/python-optimized
    - echo "Cache status for Python:"
    - ls -la .validation-cache/ || echo "No cache directory found"
  script:
    - |
      # Generate cache key based on Python template checksums
      CACHE_KEY="python-$(find templates/python -name "*.yml" -type f -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)"
      echo "Cache key: $CACHE_KEY"
      
      if [ -f ".validation-cache/$CACHE_KEY" ]; then
        echo "✓ Python templates validation cached, skipping tests..."
        echo "Cache hit: $(cat .validation-cache/$CACHE_KEY)"
        exit 0
      fi
      
      echo "✗ Cache miss, running Python template validation..."
      ./labs/lab-09-conditional-pipeline/scripts/test-python-pipelines.sh
      
      # Cache the successful result
      echo "$(date -u +%Y-%m-%dT%H:%M:%SZ): Python validation successful" > ".validation-cache/$CACHE_KEY"
      echo "✓ Results cached for future runs"
  rules:
    - changes:
        - "templates/python/**/*"
        - "shared/python/**/*"
  artifacts:
    paths:
      - "test-results/python-optimized/"
      - ".validation-cache/"
    expire_in: 1 day

# Matrix testing for multiple configurations
test-templates-matrix:
  stage: test-advanced
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl jq
  parallel:
    matrix:
      - LANGUAGE: [python, nodejs, java]
        TEMPLATE_TYPE: [basic, advanced]
  script:
    - echo "=== Matrix Testing: $LANGUAGE - $TEMPLATE_TYPE ==="
    - echo "Testing $LANGUAGE templates of type $TEMPLATE_TYPE"
    - ./labs/lab-09-conditional-pipeline/scripts/test-template-matrix.sh $LANGUAGE $TEMPLATE_TYPE
  rules:
    - changes:
        - "templates/$LANGUAGE/**/*"
        - "shared/$LANGUAGE/**/*"
  artifacts:
    reports:
      junit: "test-results/matrix-${LANGUAGE}-${TEMPLATE_TYPE}/junit.xml"
    paths:
      - "test-results/matrix-${LANGUAGE}-${TEMPLATE_TYPE}/"
    expire_in: 1 day

# =============================================================================
# STEP 6: INTEGRATION AND REPORTING
# =============================================================================

# Integration testing (only runs if any language tests ran)
integration-test:
  stage: integration
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl jq
  script:
    - echo "=== Integration Testing ==="
    - echo "Running integration tests for modified components"
    - ./labs/lab-09-conditional-pipeline/scripts/integration-test.sh
  rules:
    - changes:
        - "templates/**/*"
        - "shared/**/*"
      when: always
  needs:
    # Optional dependencies - will run if any of these jobs exist and succeed
    - job: test-python-basic
      optional: true
    - job: test-nodejs-basic
      optional: true  
    - job: test-java-basic
      optional: true
    - job: test-python-dynamic
      optional: true
    - job: test-nodejs-dynamic
      optional: true
    - job: test-java-dynamic
      optional: true
  artifacts:
    reports:
      junit: "test-results/integration/junit.xml"
    paths:
      - "test-results/integration/"
      - "reports/integration/"
    expire_in: 1 week

# Performance and efficiency reporting
generate-efficiency-report:
  stage: report
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl jq bc
  script:
    - |
      echo "=== Pipeline Efficiency Report ==="
      
      # Calculate pipeline duration
      PIPELINE_START=${CI_PIPELINE_CREATED_AT}
      PIPELINE_END=$(date -u +%s)
      DURATION=$((PIPELINE_END - PIPELINE_START))
      
      echo "PIPELINE_DURATION_SECONDS=$DURATION" >> efficiency.env
      echo "PIPELINE_DURATION_MINUTES=$((DURATION / 60))" >> efficiency.env
      
      # Count jobs that actually ran
      JOBS_TRIGGERED=$(echo "$CI_JOB_NAME" | wc -w)
      echo "JOBS_TRIGGERED=$JOBS_TRIGGERED" >> efficiency.env
      
      # Calculate efficiency score (fewer jobs = higher efficiency)
      TOTAL_POSSIBLE_JOBS=15
      EFFICIENCY_SCORE=$(( (TOTAL_POSSIBLE_JOBS - JOBS_TRIGGERED) * 100 / TOTAL_POSSIBLE_JOBS ))
      echo "EFFICIENCY_SCORE=$EFFICIENCY_SCORE" >> efficiency.env
      
      # Generate report
      ./labs/lab-09-conditional-pipeline/scripts/generate-efficiency-report.sh
      
      echo ""
      echo "=== Efficiency Metrics ==="
      cat efficiency.env
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_MERGE_REQUEST_ID
      when: always
  artifacts:
    reports:
      dotenv: efficiency.env
    paths:
      - reports/efficiency/
    expire_in: 1 month

# =============================================================================
# VALIDATION AND DEBUGGING
# =============================================================================

# Validate pipeline configuration
validate-pipeline-config:
  stage: validate
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl jq py3-pip
    - pip3 install pyyaml yamllint
  script:
    - echo "=== Validating Pipeline Configuration ==="
    - echo "Validating main pipeline file..."
    - yamllint .gitlab-ci.yml
    - echo "Validating child pipeline files..."
    - find labs/lab-09-conditional-pipeline/ci -name "*.yml" -exec yamllint {} \;
    - echo "Validating template files..."
    - find templates -name "*.yml" -exec yamllint {} \; || echo "No template files found"
    - echo "✓ All YAML files are valid"
  rules:
    - changes:
        - ".gitlab-ci.yml"
        - "labs/lab-09-conditional-pipeline/**/*.yml"
        - "templates/**/*.yml"
  artifacts:
    reports:
      junit: "test-results/validation/junit.xml"
    paths:
      - "test-results/validation/"
    expire_in: 1 day

# Debug job for troubleshooting conditional rules
debug-conditional-rules:
  stage: validate
  image: alpine/git:latest
  script:
    - |
      echo "=== Debugging Conditional Pipeline Rules ==="
      echo "Pipeline source: $CI_PIPELINE_SOURCE"
      echo "Commit branch: $CI_COMMIT_BRANCH"
      echo "Merge request ID: $CI_MERGE_REQUEST_ID"
      echo "Target branch: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
      echo "Git depth: $GIT_DEPTH"
      echo ""
      
      echo "=== Git Status ==="
      git log --oneline -5
      echo ""
      
      echo "=== Changed Files (last commit) ==="
      git diff --name-only HEAD~1..HEAD || echo "Could not determine changed files"
      echo ""
      
      echo "=== Environment Variables ==="
      env | grep ^CI_ | sort
  rules:
    - when: manual
      allow_failure: true
  artifacts:
    paths:
      - debug-info.txt
    expire_in: 1 day