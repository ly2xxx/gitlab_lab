# Lab 6: Security Scanning Example
# This pipeline demonstrates comprehensive security scanning integration
# including SAST, DAST, dependency scanning, and custom security tools

# Include GitLab security templates
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml

stages:
  - validate
  - build
  - test
  - security
  - quality
  - deploy

variables:
  # Security scanning configuration
  SAST_ENABLED: "true"
  DEPENDENCY_SCANNING_ENABLED: "true"
  CONTAINER_SCANNING_ENABLED: "true"
  SECRET_DETECTION_ENABLED: "true"
  LICENSE_SCANNING_ENABLED: "true"
  
  # Security thresholds
  MAX_CRITICAL_VULNERABILITIES: "0"
  MAX_HIGH_VULNERABILITIES: "2"
  
  # Application configuration
  APP_NAME: "security-demo"
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE/$APP_NAME"
  
  # SAST configuration
  SAST_EXCLUDED_PATHS: "tests/, docs/, *.md, *.txt"
  
  # Dependency scanning configuration
  DS_EXCLUDED_PATHS: "tests/, docs/"
  DS_ANALYZER_IMAGES: |
    gemnasium
    retire-js
    gemnasium-maven
    gemnasium-python
  
  # Container scanning configuration
  CS_ANALYZER_IMAGE: "registry.gitlab.com/security-products/container-scanning:latest"
  
  # Secret detection configuration
  SECRET_DETECTION_EXCLUDED_PATHS: "tests/, docs/"
  SECRET_DETECTION_HISTORIC_SCAN: "true"

# Global before_script for security jobs
.security_setup: &security_setup
  before_script:
    - echo "=== Security Scanning Setup ==="
    - echo "Pipeline: $CI_PIPELINE_ID"
    - echo "Project: $CI_PROJECT_NAME"
    - echo "Commit: $CI_COMMIT_SHA"
    - echo "Branch: $CI_COMMIT_REF_NAME"
    - echo "Security scanning enabled for: SAST($SAST_ENABLED), DS($DEPENDENCY_SCANNING_ENABLED), CS($CONTAINER_SCANNING_ENABLED)"

# VALIDATE STAGE - Pre-security validation
validate_security_config:
  stage: validate
  image: alpine:latest
  script:
    - echo "=== Security Configuration Validation ==="
    - echo "Checking security scanning configuration..."
    
    # Validate security variables
    - |
      if [ -z "$SAST_ENABLED" ]; then
        echo "❌ SAST_ENABLED not set"
        exit 1
      fi
    
    - |
      if [ -z "$DEPENDENCY_SCANNING_ENABLED" ]; then
        echo "❌ DEPENDENCY_SCANNING_ENABLED not set"
        exit 1
      fi
    
    # Check for security configuration files
    - |
      if [ -f ".gitlab/sast-rules.yml" ]; then
        echo "✅ Custom SAST rules found"
      else
        echo "ℹ️  Using default SAST rules"
      fi
    
    - echo "Security configuration validation completed"

# BUILD STAGE - Build application for security testing
build_application:
  stage: build
  image: node:18
  script:
    - echo "=== Building Application for Security Testing ==="
    - npm ci
    - npm run build || echo "Build script not available"
    - echo "Application built successfully"
  artifacts:
    paths:
      - node_modules/
      - dist/
    expire_in: 1 hour

build_docker_image:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "=== Building Docker Image for Security Scanning ==="
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHA .
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHA
    - echo "Docker image built and pushed: $DOCKER_IMAGE:$CI_COMMIT_SHA"
  rules:
    - if: $CONTAINER_SCANNING_ENABLED == "true"

# SECURITY STAGE - Comprehensive security scanning

# Enhanced SAST with custom configuration
sast_enhanced:
  extends: sast
  stage: security
  <<: *security_setup
  variables:
    SAST_EXCLUDED_PATHS: "$SAST_EXCLUDED_PATHS"
    SAST_ANALYZER_IMAGES: |
      bandit
      eslint
      nodejs-scan
      semgrep
      sobelow
  script:
    - echo "Running enhanced SAST analysis..."
    - /analyzer run
    - echo "SAST analysis completed"
  artifacts:
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: $SAST_ENABLED == "true"

# Enhanced Dependency Scanning
dependency_scanning_enhanced:
  extends: .dependency_scanning
  stage: security
  <<: *security_setup
  variables:
    DS_EXCLUDED_PATHS: "$DS_EXCLUDED_PATHS"
    DS_ANALYZER_IMAGES: "$DS_ANALYZER_IMAGES"
  script:
    - echo "Running enhanced dependency vulnerability scan..."
    - /analyzer run
    - echo "Dependency scanning completed"
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    paths:
      - gl-dependency-scanning-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: $DEPENDENCY_SCANNING_ENABLED == "true"

# Enhanced Container Scanning
container_scanning_enhanced:
  extends: container_scanning
  stage: security
  <<: *security_setup
  variables:
    CI_APPLICATION_REPOSITORY: $DOCKER_IMAGE
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
    CS_ANALYZER_IMAGE: "$CS_ANALYZER_IMAGE"
  script:
    - echo "Running enhanced container security scan..."
    - /analyzer run
    - echo "Container scanning completed"
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    paths:
      - gl-container-scanning-report.json
    when: always
    expire_in: 1 week
  dependencies:
    - build_docker_image
  rules:
    - if: $CONTAINER_SCANNING_ENABLED == "true"

# Enhanced Secret Detection
secret_detection_enhanced:
  extends: .secret-analyzer
  stage: security
  <<: *security_setup
  variables:
    SECRET_DETECTION_EXCLUDED_PATHS: "$SECRET_DETECTION_EXCLUDED_PATHS"
    SECRET_DETECTION_HISTORIC_SCAN: "$SECRET_DETECTION_HISTORIC_SCAN"
  script:
    - echo "Running enhanced secret detection scan..."
    - /analyzer run
    - echo "Secret detection completed"
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: $SECRET_DETECTION_ENABLED == "true"

# License Compliance Scanning
license_scanning_enhanced:
  extends: license_scanning
  stage: security
  <<: *security_setup
  script:
    - echo "Running license compliance scan..."
    - /run.sh analyze .
    - echo "License scanning completed"
  artifacts:
    reports:
      license_scanning: gl-license-scanning-report.json
    paths:
      - gl-license-scanning-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: $LICENSE_SCANNING_ENABLED == "true"

# Custom Security Tools Integration
custom_security_tools:
  stage: security
  image: node:18
  dependencies:
    - build_application
  before_script:
    - echo "=== Custom Security Tools Setup ==="
    - npm install -g audit-ci eslint-plugin-security
    - apk add --no-cache curl jq || apt-get update && apt-get install -y curl jq
  script:
    - echo "=== Running Custom Security Tools ==="
    
    # Enhanced NPM Audit
    - echo "Running NPM audit with audit-ci..."
    - audit-ci --config audit-ci.json || echo "NPM audit completed with findings"
    
    # Security-focused ESLint
    - echo "Running security-focused linting..."
    - npx eslint src/ --config .eslintrc.security.js --format json --output-file eslint-security-report.json || echo "Security linting completed"
    
    # Check for common security patterns
    - echo "Checking for common security anti-patterns..."
    - grep -r "eval\\(" src/ && echo "⚠️  eval() usage found" || echo "✅ No eval() usage found"
    - grep -r "innerHTML" src/ && echo "⚠️  innerHTML usage found" || echo "✅ No innerHTML usage found"
    - grep -r "document.write" src/ && echo "⚠️  document.write usage found" || echo "✅ No document.write usage found"
    
    # Check for hardcoded secrets patterns
    - echo "Checking for potential hardcoded secrets..."
    - grep -ri "password\\s*=" src/ && echo "⚠️  Potential hardcoded password found" || echo "✅ No hardcoded passwords found"
    - grep -ri "api[_-]key" src/ && echo "⚠️  Potential API key found" || echo "✅ No API keys found"
    
    - echo "Custom security tools completed"
  artifacts:
    when: always
    paths:
      - eslint-security-report.json
      - audit-ci-report.json
    expire_in: 1 week
  allow_failure: true

# OWASP ZAP Security Testing
owasp_zap_scan:
  stage: security
  image: owasp/zap2docker-stable:latest
  services:
    - name: $DOCKER_IMAGE:$CI_COMMIT_SHA
      alias: app
  variables:
    APP_URL: "http://app:3000"
  before_script:
    - echo "=== OWASP ZAP Security Testing Setup ==="
    - echo "Target application: $APP_URL"
    - sleep 30  # Wait for application to start
  script:
    - echo "=== Running OWASP ZAP Security Scan ==="
    
    # Basic ZAP scan
    - zap-baseline.py -t $APP_URL -J zap-baseline-report.json -r zap-baseline-report.html || echo "ZAP baseline scan completed"
    
    # Full ZAP scan (more comprehensive but slower)
    - zap-full-scan.py -t $APP_URL -J zap-full-report.json -r zap-full-report.html || echo "ZAP full scan completed"
    
    - echo "OWASP ZAP scanning completed"
  artifacts:
    when: always
    paths:
      - zap-baseline-report.json
      - zap-baseline-report.html
      - zap-full-report.json
      - zap-full-report.html
    expire_in: 1 week
    expose_as: "OWASP ZAP Security Report"
  allow_failure: true
  dependencies:
    - build_docker_image
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
      when: manual

# QUALITY STAGE - Security quality gates

# Security Quality Gate
security_quality_gate:
  stage: quality
  image: alpine:latest
  dependencies:
    - sast_enhanced
    - dependency_scanning_enhanced
    - container_scanning_enhanced
    - secret_detection_enhanced
  before_script:
    - apk add --no-cache jq curl
  script:
    - echo "=== Security Quality Gate Analysis ==="
    - echo "Maximum allowed vulnerabilities - Critical: $MAX_CRITICAL_VULNERABILITIES, High: $MAX_HIGH_VULNERABILITIES"
    
    # Initialize counters
    - CRITICAL_COUNT=0
    - HIGH_COUNT=0
    - GATE_FAILED=false
    
    # Check SAST results
    - |
      if [ -f "gl-sast-report.json" ]; then
        echo "Analyzing SAST results..."
        SAST_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' gl-sast-report.json 2>/dev/null || echo "0")
        SAST_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "High")] | length' gl-sast-report.json 2>/dev/null || echo "0")
        echo "SAST - Critical: $SAST_CRITICAL, High: $SAST_HIGH"
        CRITICAL_COUNT=$((CRITICAL_COUNT + SAST_CRITICAL))
        HIGH_COUNT=$((HIGH_COUNT + SAST_HIGH))
      else
        echo "No SAST report found"
      fi
    
    # Check Dependency Scanning results
    - |
      if [ -f "gl-dependency-scanning-report.json" ]; then
        echo "Analyzing Dependency Scanning results..."
        DEP_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' gl-dependency-scanning-report.json 2>/dev/null || echo "0")
        DEP_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "High")] | length' gl-dependency-scanning-report.json 2>/dev/null || echo "0")
        echo "Dependencies - Critical: $DEP_CRITICAL, High: $DEP_HIGH"
        CRITICAL_COUNT=$((CRITICAL_COUNT + DEP_CRITICAL))
        HIGH_COUNT=$((HIGH_COUNT + DEP_HIGH))
      else
        echo "No Dependency Scanning report found"
      fi
    
    # Check Container Scanning results
    - |
      if [ -f "gl-container-scanning-report.json" ]; then
        echo "Analyzing Container Scanning results..."
        CONTAINER_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' gl-container-scanning-report.json 2>/dev/null || echo "0")
        CONTAINER_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "High")] | length' gl-container-scanning-report.json 2>/dev/null || echo "0")
        echo "Container - Critical: $CONTAINER_CRITICAL, High: $CONTAINER_HIGH"
        CRITICAL_COUNT=$((CRITICAL_COUNT + CONTAINER_CRITICAL))
        HIGH_COUNT=$((HIGH_COUNT + CONTAINER_HIGH))
      else
        echo "No Container Scanning report found"
      fi
    
    # Check Secret Detection results
    - |
      if [ -f "gl-secret-detection-report.json" ]; then
        echo "Analyzing Secret Detection results..."
        SECRET_COUNT=$(jq '.vulnerabilities | length' gl-secret-detection-report.json 2>/dev/null || echo "0")
        echo "Secrets detected: $SECRET_COUNT"
        if [ "$SECRET_COUNT" -gt 0 ]; then
          echo "❌ Secrets detected in code repository"
          GATE_FAILED=true
        fi
      else
        echo "No Secret Detection report found"
      fi
    
    # Evaluate security gate
    - echo ""
    - echo "=== Security Gate Evaluation ==="
    - echo "Total Critical vulnerabilities: $CRITICAL_COUNT (max: $MAX_CRITICAL_VULNERABILITIES)"
    - echo "Total High vulnerabilities: $HIGH_COUNT (max: $MAX_HIGH_VULNERABILITIES)"
    
    # Check thresholds
    - |
      if [ "$CRITICAL_COUNT" -gt "$MAX_CRITICAL_VULNERABILITIES" ]; then
        echo "❌ Critical vulnerabilities exceed threshold ($CRITICAL_COUNT > $MAX_CRITICAL_VULNERABILITIES)"
        GATE_FAILED=true
      fi
    
    - |
      if [ "$HIGH_COUNT" -gt "$MAX_HIGH_VULNERABILITIES" ]; then
        echo "❌ High vulnerabilities exceed threshold ($HIGH_COUNT > $MAX_HIGH_VULNERABILITIES)"
        GATE_FAILED=true
      fi
    
    # Final gate decision
    - |
      if [ "$GATE_FAILED" = "true" ]; then
        echo ""
        echo "❌ SECURITY QUALITY GATE FAILED"
        echo "The pipeline cannot proceed due to security vulnerabilities above acceptable thresholds."
        echo "Please review and remediate the security findings before proceeding."
        exit 1
      else
        echo ""
        echo "✅ SECURITY QUALITY GATE PASSED"
        echo "All security scans completed within acceptable thresholds."
      fi
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

# Security Report Aggregation
security_report_summary:
  stage: quality
  image: alpine:latest
  dependencies:
    - sast_enhanced
    - dependency_scanning_enhanced
    - container_scanning_enhanced
    - secret_detection_enhanced
    - license_scanning_enhanced
    - custom_security_tools
  before_script:
    - apk add --no-cache jq
  script:
    - echo "=== Security Report Aggregation ==="
    
    # Create comprehensive security summary
    - echo "# Security Scan Summary Report" > security-summary.md
    - echo "" >> security-summary.md
    - echo "**Generated:** $(date)" >> security-summary.md
    - echo "**Pipeline:** $CI_PIPELINE_ID" >> security-summary.md
    - echo "**Project:** $CI_PROJECT_NAME" >> security-summary.md
    - echo "**Commit:** $CI_COMMIT_SHA" >> security-summary.md
    - echo "**Branch:** $CI_COMMIT_REF_NAME" >> security-summary.md
    - echo "" >> security-summary.md
    
    # Executive Summary
    - echo "## Executive Summary" >> security-summary.md
    - echo "" >> security-summary.md
    
    # SAST Summary
    - |
      if [ -f "gl-sast-report.json" ]; then
        echo "### 🔍 Static Application Security Testing (SAST)" >> security-summary.md
        SAST_TOTAL=$(jq '.vulnerabilities | length' gl-sast-report.json 2>/dev/null || echo "0")
        SAST_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' gl-sast-report.json 2>/dev/null || echo "0")
        SAST_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "High")] | length' gl-sast-report.json 2>/dev/null || echo "0")
        SAST_MEDIUM=$(jq '[.vulnerabilities[] | select(.severity == "Medium")] | length' gl-sast-report.json 2>/dev/null || echo "0")
        SAST_LOW=$(jq '[.vulnerabilities[] | select(.severity == "Low")] | length' gl-sast-report.json 2>/dev/null || echo "0")
        echo "- **Total Vulnerabilities:** $SAST_TOTAL" >> security-summary.md
        echo "- **Critical:** $SAST_CRITICAL" >> security-summary.md
        echo "- **High:** $SAST_HIGH" >> security-summary.md
        echo "- **Medium:** $SAST_MEDIUM" >> security-summary.md
        echo "- **Low:** $SAST_LOW" >> security-summary.md
        echo "" >> security-summary.md
      else
        echo "### 🔍 Static Application Security Testing (SAST)" >> security-summary.md
        echo "- **Status:** Not available" >> security-summary.md
        echo "" >> security-summary.md
      fi
    
    # Dependency Scanning Summary
    - |
      if [ -f "gl-dependency-scanning-report.json" ]; then
        echo "### 📦 Dependency Scanning" >> security-summary.md
        DEP_TOTAL=$(jq '.vulnerabilities | length' gl-dependency-scanning-report.json 2>/dev/null || echo "0")
        DEP_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' gl-dependency-scanning-report.json 2>/dev/null || echo "0")
        DEP_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "High")] | length' gl-dependency-scanning-report.json 2>/dev/null || echo "0")
        DEP_MEDIUM=$(jq '[.vulnerabilities[] | select(.severity == "Medium")] | length' gl-dependency-scanning-report.json 2>/dev/null || echo "0")
        DEP_LOW=$(jq '[.vulnerabilities[] | select(.severity == "Low")] | length' gl-dependency-scanning-report.json 2>/dev/null || echo "0")
        echo "- **Total Vulnerabilities:** $DEP_TOTAL" >> security-summary.md
        echo "- **Critical:** $DEP_CRITICAL" >> security-summary.md
        echo "- **High:** $DEP_HIGH" >> security-summary.md
        echo "- **Medium:** $DEP_MEDIUM" >> security-summary.md
        echo "- **Low:** $DEP_LOW" >> security-summary.md
        echo "" >> security-summary.md
      else
        echo "### 📦 Dependency Scanning" >> security-summary.md
        echo "- **Status:** Not available" >> security-summary.md
        echo "" >> security-summary.md
      fi
    
    # Container Scanning Summary
    - |
      if [ -f "gl-container-scanning-report.json" ]; then
        echo "### 🐳 Container Scanning" >> security-summary.md
        CONTAINER_TOTAL=$(jq '.vulnerabilities | length' gl-container-scanning-report.json 2>/dev/null || echo "0")
        CONTAINER_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' gl-container-scanning-report.json 2>/dev/null || echo "0")
        CONTAINER_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "High")] | length' gl-container-scanning-report.json 2>/dev/null || echo "0")
        echo "- **Total Vulnerabilities:** $CONTAINER_TOTAL" >> security-summary.md
        echo "- **Critical:** $CONTAINER_CRITICAL" >> security-summary.md
        echo "- **High:** $CONTAINER_HIGH" >> security-summary.md
        echo "" >> security-summary.md
      else
        echo "### 🐳 Container Scanning" >> security-summary.md
        echo "- **Status:** Not available" >> security-summary.md
        echo "" >> security-summary.md
      fi
    
    # Secret Detection Summary
    - |
      if [ -f "gl-secret-detection-report.json" ]; then
        echo "### 🔐 Secret Detection" >> security-summary.md
        SECRET_TOTAL=$(jq '.vulnerabilities | length' gl-secret-detection-report.json 2>/dev/null || echo "0")
        echo "- **Secrets Found:** $SECRET_TOTAL" >> security-summary.md
        if [ "$SECRET_TOTAL" -gt 0 ]; then
          echo "- **Status:** ⚠️ Secrets detected in repository" >> security-summary.md
        else
          echo "- **Status:** ✅ No secrets detected" >> security-summary.md
        fi
        echo "" >> security-summary.md
      else
        echo "### 🔐 Secret Detection" >> security-summary.md
        echo "- **Status:** Not available" >> security-summary.md
        echo "" >> security-summary.md
      fi
    
    # License Scanning Summary
    - |
      if [ -f "gl-license-scanning-report.json" ]; then
        echo "### 📄 License Compliance" >> security-summary.md
        LICENSE_TOTAL=$(jq '.licenses | length' gl-license-scanning-report.json 2>/dev/null || echo "0")
        echo "- **Licenses Found:** $LICENSE_TOTAL" >> security-summary.md
        echo "- **Status:** ✅ License compliance checked" >> security-summary.md
        echo "" >> security-summary.md
      else
        echo "### 📄 License Compliance" >> security-summary.md
        echo "- **Status:** Not available" >> security-summary.md
        echo "" >> security-summary.md
      fi
    
    # Recommendations
    - echo "## 🎯 Recommendations" >> security-summary.md
    - echo "" >> security-summary.md
    - echo "1. **Critical and High vulnerabilities** should be addressed immediately" >> security-summary.md
    - echo "2. **Dependencies** should be updated regularly to latest secure versions" >> security-summary.md
    - echo "3. **Container images** should use minimal base images and be updated frequently" >> security-summary.md
    - echo "4. **Secrets** should never be committed to the repository" >> security-summary.md
    - echo "5. **Regular security reviews** should be conducted" >> security-summary.md
    - echo "" >> security-summary.md
    
    # Display summary
    - echo "Security report summary generated:"
    - cat security-summary.md
  artifacts:
    when: always
    paths:
      - security-summary.md
    expire_in: 1 month
    expose_as: "Security Summary Report"

# DEPLOY STAGE - Secure deployment
deploy_staging_secure:
  stage: deploy
  image: alpine:latest
  dependencies:
    - security_quality_gate
  before_script:
    - apk add --no-cache curl
  script:
    - echo "=== Secure Staging Deployment ==="
    - echo "Security quality gate passed - proceeding with deployment"
    - echo "Application: $APP_NAME"
    - echo "Image: $DOCKER_IMAGE:$CI_COMMIT_SHA"
    - echo "Security scanned and approved for deployment"
    - echo "Deployment completed to staging environment"
  environment:
    name: staging
    url: https://staging-secure.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: never

deploy_production_secure:
  stage: deploy
  image: alpine:latest
  dependencies:
    - security_quality_gate
    - security_report_summary
  script:
    - echo "=== Secure Production Deployment ==="
    - echo "🔒 PRODUCTION DEPLOYMENT WITH SECURITY VALIDATION"
    - echo "All security gates passed:"
    - echo "  ✅ SAST Analysis"
    - echo "  ✅ Dependency Scanning"
    - echo "  ✅ Container Scanning"
    - echo "  ✅ Secret Detection"
    - echo "  ✅ Security Quality Gate"
    - echo "Production deployment authorized and completed!"
  environment:
    name: production
    url: https://production-secure.example.com
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - when: never