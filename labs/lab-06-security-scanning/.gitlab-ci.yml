# Advanced security pipeline with multiple scanning tools
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  # Security tool configuration
  SAST_EXCLUDED_PATHS: "tests/**,docs/**,*.md"
  SECURE_LOG_LEVEL: "info"
  
  # Container scanning
  CS_MAJOR_VERSION: 5
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:$CS_MAJOR_VERSION"
  
  # DAST configuration
  DAST_WEBSITE: "https://staging.yourdomain.com"
  DAST_FULL_SCAN_ENABLED: "true"
  DAST_API_SPECIFICATION: "https://staging.yourdomain.com/api/swagger.json"

stages:
  - build
  - test
  - security-scan
  - security-analysis
  - compliance
  - deploy

# Enhanced SAST with multiple engines
sast-eslint:
  stage: security-scan
  image: node:18
  script:
    - npm install -g eslint-plugin-security
    - eslint --ext .js src/ --format json --output-file eslint-security.json
    - eslint --ext .js src/ --format sarif --output-file eslint-security.sarif
  artifacts:
    reports:
      sast: eslint-security.sarif
    paths:
      - eslint-security.json
  allow_failure: true

# SonarQube integration for comprehensive analysis
sonarqube-scan:
  stage: security-scan
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.sources=src/
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      -Dsonar.testExecutionReportPaths=coverage/test-reporter.xml
  dependencies:
    - unit-tests
  only:
    - main
    - develop

# Advanced dependency scanning with multiple tools
dependency-scan-npm:
  stage: security-scan
  image: node:18
  script:
    - npm audit --json > npm-audit.json
    - npm install -g auditjs
    - auditjs ossi --json > auditjs-report.json
  artifacts:
    reports:
      dependency_scanning: npm-audit.json
    paths:
      - auditjs-report.json
  allow_failure: true

dependency-scan-snyk:
  stage: security-scan
  image: snyk/snyk:node
  script:
    - snyk auth $SNYK_TOKEN
    - snyk test --json > snyk-test.json
    - snyk code test --json > snyk-code.json
    - snyk monitor
  artifacts:
    paths:
      - snyk-test.json
      - snyk-code.json
  allow_failure: true

# Container security with Trivy and Grype
trivy-container-scan:
  stage: security-scan
  image: aquasec/trivy:latest
  script:
    - trivy image --format sarif --output trivy-container.sarif $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - trivy image --format json --output trivy-container.json $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - trivy image --severity HIGH,CRITICAL --exit-code 1 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-container.sarif
    paths:
      - trivy-container.json
  dependencies:
    - build-production-image

grype-container-scan:
  stage: security-scan
  image: anchore/grype:latest
  script:
    - grype $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -o sarif > grype-container.sarif
    - grype $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -o json > grype-container.json
  artifacts:
    reports:
      container_scanning: grype-container.sarif
    paths:
      - grype-container.json
  allow_failure: true

# Infrastructure as Code security scanning
iac-security-scan:
  stage: security-scan
  image: checkmarx/kics:latest
  script:
    - kics scan -p . -o kics-results --report-formats json,sarif
  artifacts:
    reports:
      sast: kics-results/results.sarif
    paths:
      - kics-results/
  allow_failure: true

# Advanced DAST with OWASP ZAP
dast-scan:
  stage: security-scan
  image: owasp/zap2docker-stable:latest
  services:
    - name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      alias: app
  variables:
    DAST_WEBSITE: "http://app:3000"
  script:
    - mkdir -p /zap/wrk
    - |
      zap-full-scan.py -t $DAST_WEBSITE \
        -J dast-report.json \
        -r dast-report.html \
        -x dast-report.xml || true
    - cp /zap/wrk/* . || true
  artifacts:
    reports:
      dast: dast-report.json
    paths:
      - dast-report.html
      - dast-report.xml
  allow_failure: true

# API security testing
api-security-scan:
  stage: security-scan
  image: owasp/zap2docker-stable:latest
  script:
    - |
      zap-api-scan.py -t http://app:3000/api \
        -f openapi \
        -J api-security-report.json || true
  artifacts:
    paths:
      - api-security-report.json
  allow_failure: true

# Compliance and security reporting
compliance-report:
  stage: compliance
  image: python:3.9
  script:
    - pip install jq yq
    - python scripts/generate-compliance-report.py
  artifacts:
    reports:
      compliance: compliance-report.json
    paths:
      - compliance-report.html
      - security-dashboard.json
  dependencies:
    - sast
    - dependency-scan-npm
    - trivy-container-scan

# Security metrics collection
security-metrics:
  stage: security-analysis
  image: alpine:latest
  script:
    - apk add --no-cache jq curl
    - |
      # Collect security metrics
      TOTAL_VULNS=0
      CRITICAL_VULNS=0
      HIGH_VULNS=0
      
      # Process SAST results
      if [ -f gl-sast-report.json ]; then
        SAST_VULNS=$(jq '.vulnerabilities | length' gl-sast-report.json)
        TOTAL_VULNS=$((TOTAL_VULNS + SAST_VULNS))
      fi
      
      # Process dependency scan results
      if [ -f gl-dependency-scanning-report.json ]; then
        DEP_VULNS=$(jq '.vulnerabilities | length' gl-dependency-scanning-report.json)
        TOTAL_VULNS=$((TOTAL_VULNS + DEP_VULNS))
      fi
      
      # Generate metrics
      cat > security-metrics.json << EOF
      {
        "total_vulnerabilities": $TOTAL_VULNS,
        "critical_vulnerabilities": $CRITICAL_VULNS,
        "high_vulnerabilities": $HIGH_VULNS,
        "scan_timestamp": "$(date -Iseconds)",
        "commit_sha": "$CI_COMMIT_SHA",
        "pipeline_id": "$CI_PIPELINE_ID"
      }
      EOF
      
      echo "Security Metrics:"
      cat security-metrics.json
  artifacts:
    paths:
      - security-metrics.json
    expire_in: 1 month

# Vulnerability remediation automation
auto-remediation:
  stage: security-analysis
  image: node:18
  script:
    - |
      # Check for known vulnerabilities with automated fixes
      npm audit fix --dry-run > audit-fix-preview.txt
      
      # If fixes available and not breaking changes
      if grep -q "fixed" audit-fix-preview.txt; then
        echo "Automated fixes available"
        npm audit fix --package-lock-only
        
        # Create MR for fixes if changes made
        if ! git diff --quiet package-lock.json; then
          git config user.email "security-bot@company.com"
          git config user.name "Security Bot"
          git checkout -b "security/auto-fix-$CI_PIPELINE_ID"
          git add package-lock.json
          git commit -m "Auto-fix security vulnerabilities"
          git push origin "security/auto-fix-$CI_PIPELINE_ID"
          
          # Create merge request (requires GitLab CLI or API call)
          echo "Automated security fix branch created"
        fi
      fi
  artifacts:
    paths:
      - audit-fix-preview.txt
  only:
    - main
  when: manual

# Security notification system
security-alerts:
  stage: security-analysis
  image: alpine:latest
  script:
    - apk add --no-cache curl jq
    - |
      # Check for critical vulnerabilities
      CRITICAL_COUNT=0
      
      # Count critical vulnerabilities from all scans
      for report in gl-*-report.json; do
        if [ -f "$report" ]; then
          CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' "$report" 2>/dev/null || echo 0)
          CRITICAL_COUNT=$((CRITICAL_COUNT + CRITICAL))
        fi
      done
      
      # Send alert if critical vulnerabilities found
      if [ "$CRITICAL_COUNT" -gt 0 ]; then
        curl -X POST "$SLACK_WEBHOOK_URL" \
          -H 'Content-type: application/json' \
          --data "{
            \"text\": \"ðŸš¨ Critical Security Alert\",
            \"attachments\": [{
              \"color\": \"danger\",
              \"fields\": [{
                \"title\": \"Critical Vulnerabilities Found\",
                \"value\": \"$CRITICAL_COUNT critical vulnerabilities detected in $CI_PROJECT_NAME\",
                \"short\": false
              }, {
                \"title\": \"Pipeline\",
                \"value\": \"$CI_PIPELINE_URL\",
                \"short\": true
              }, {
                \"title\": \"Commit\",
                \"value\": \"$CI_COMMIT_SHORT_SHA\",
                \"short\": true
              }]
            }]
          }"
      fi
  dependencies:
    - sast
    - dependency-scan-npm
    - trivy-container-scan
  when: always