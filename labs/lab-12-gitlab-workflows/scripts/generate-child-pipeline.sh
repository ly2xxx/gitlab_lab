#!/bin/bash
# generate-child-pipeline.sh
# Dynamically generates child pipeline configuration based on changes and conditions

set -e

echo "üîß Generating dynamic child pipeline configuration..."

# Initialize the pipeline file
PIPELINE_FILE="$CI_PROJECT_DIR/generated-child-pipeline.yml"

# Generate timestamp for the pipeline
GENERATION_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

# Start with basic structure
cat > $PIPELINE_FILE << EOF
# Dynamically Generated Child Pipeline
# Generated by: generate-child-pipeline.sh

stages:
  - dynamic-analyze
  - dynamic-build
  - dynamic-test
  - dynamic-deploy

variables:
  CHILD_PIPELINE_TYPE: "dynamic"
  GENERATION_TIME: "$GENERATION_TIME"

before_script:
  - echo "üîó Dynamic Child Pipeline - ID- $CI_PIPELINE_ID"
  - echo "üìã Parent Pipeline ID- $PARENT_PIPELINE_ID"
  - echo "‚è∞ Generated at- $GENERATION_TIME"

# Analysis job - always included
dynamic-analyze-changes:
  stage: dynamic-analyze
  script:
    - echo "üîç Analyzing changes for dynamic pipeline"
    - echo "Commit SHA- $CI_COMMIT_SHA"
    - echo "Branch- $CI_COMMIT_REF_NAME"
    - git diff --name-only HEAD~1 HEAD || echo "No previous commit to compare"
  artifacts:
    paths:
      - change-analysis.txt
    expire_in: 1 hour

EOF

# Check for different types of changes and add corresponding jobs
echo "üìÅ Analyzing repository changes..."

# Function to add job to pipeline
add_job() {
    local job_name=$1
    local stage=$2
    local script_content=$3
    local needs=${4:-""}
    
    cat >> $PIPELINE_FILE << EOF

${job_name}:
  stage: ${stage}
  script:
    ${script_content}
EOF

    if [ ! -z "$needs" ]; then
        cat >> $PIPELINE_FILE << EOF
  needs:
    - $needs
EOF
    fi
}

# Check for frontend changes
if [ -d "frontend" ] || ls *.html *.css *.js 2>/dev/null || [ -f "package.json" ]; then
    echo "üé® Frontend changes detected, adding frontend jobs..."
    
    add_job "dynamic-build-frontend" "dynamic-build" \
        "- echo 'üé® Building frontend components dynamically'
    - mkdir -p dynamic-build/frontend
    - echo 'Frontend built dynamically' > dynamic-build/frontend/app.js
    - echo '‚úÖ Frontend build completed'" \
        "dynamic-analyze-changes"
    
    cat >> $PIPELINE_FILE << EOF
  artifacts:
    paths:
      - dynamic-build/frontend/
    expire_in: 30 minutes
EOF

    add_job "dynamic-test-frontend" "dynamic-test" \
        "- echo 'üß™ Testing frontend components'
    - echo 'Running frontend tests...'
    - echo '‚úÖ Frontend tests passed'" \
        "dynamic-build-frontend"
fi

# Check for backend changes
if [ -d "backend" ] || ls *.py *.java *.go 2>/dev/null || [ -f "requirements.txt" ] || [ -f "pom.xml" ]; then
    echo "‚öôÔ∏è Backend changes detected, adding backend jobs..."
    
    add_job "dynamic-build-backend" "dynamic-build" \
        "- echo '‚öôÔ∏è Building backend services dynamically'
    - mkdir -p dynamic-build/backend
    - echo 'Backend API ready' > dynamic-build/backend/app.jar
    - echo '‚úÖ Backend build completed'" \
        "dynamic-analyze-changes"
    
    cat >> $PIPELINE_FILE << EOF
  artifacts:
    paths:
      - dynamic-build/backend/
    expire_in: 30 minutes
EOF

    add_job "dynamic-test-backend" "dynamic-test" \
        "- echo 'üß™ Testing backend services'
    - echo 'Running API tests...'
    - echo 'Running database tests...'
    - echo '‚úÖ Backend tests passed'" \
        "dynamic-build-backend"
fi

# Check for infrastructure changes
if [ -d "infrastructure" ] || ls Dockerfile* docker-compose*.yml 2>/dev/null || [ -d "kubernetes" ] || [ -d "terraform" ]; then
    echo "üèóÔ∏è Infrastructure changes detected, adding infrastructure jobs..."
    
    add_job "dynamic-build-infrastructure" "dynamic-build" \
        "- echo 'üèóÔ∏è Processing infrastructure changes'
    - echo 'Validating Docker configurations...'
    - echo 'Checking Kubernetes manifests...'
    - echo '‚úÖ Infrastructure validation completed'" \
        "dynamic-analyze-changes"
    
    add_job "dynamic-deploy-infrastructure" "dynamic-deploy" \
        "- echo 'üöÄ Deploying infrastructure changes'
    - echo 'This would deploy infrastructure updates'
    - echo '‚úÖ Infrastructure deployment completed'" \
        "dynamic-build-infrastructure"
fi

# Check if it's a main branch - add production deployment
if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
    echo "üéØ Main branch detected, adding production deployment..."
    
    add_job "dynamic-deploy-production" "dynamic-deploy" \
        "- echo 'üöÄ Production deployment (dynamically generated)'
    - echo 'Deploying to production environment...'
    - echo 'Running smoke tests...'
    - echo '‚úÖ Production deployment completed'"
    
    cat >> $PIPELINE_FILE << EOF
  rules:
    - if: \$CI_COMMIT_BRANCH == \$CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: production-dynamic
    url: https://prod-dynamic.example.com
EOF
fi

# Add a summary job that runs always
cat >> $PIPELINE_FILE << 'EOF'

dynamic-pipeline-summary:
  stage: dynamic-deploy
  script:
    - echo "üìä Dynamic Pipeline Summary"
    - echo "=============================="
    - echo "Pipeline Type: Dynamic Child"
    - echo "Generated at- $GENERATION_TIME"
    - echo "Parent Pipeline- $PARENT_PIPELINE_ID"
    - echo "Child Pipeline- $CI_PIPELINE_ID"
    - echo "Changes analyzed and processed dynamically"
    - echo "‚úÖ Dynamic pipeline completed successfully"
  rules:
    - when: always
EOF

echo "‚úÖ Dynamic child pipeline configuration generated- $PIPELINE_FILE"
echo "üìÑ Pipeline content:"
echo "----------------------------------------"
cat $PIPELINE_FILE
echo "----------------------------------------"

# Validate the generated YAML (if yamllint is available)
if command -v yamllint >/dev/null 2>&1; then
    echo "üîç Validating generated YAML..."
    yamllint $PIPELINE_FILE && echo "‚úÖ YAML validation passed" || echo "‚ö†Ô∏è YAML validation warnings"
else
    echo "‚ÑπÔ∏è yamllint not available, skipping YAML validation"
fi

echo "üéâ Dynamic pipeline generation completed!"