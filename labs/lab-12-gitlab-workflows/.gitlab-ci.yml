# GitLab Workflows Lab - Main Pipeline Configuration
# This lab demonstrates various GitLab CI/CD workflow patterns

# Global variables and configuration
variables:
  # Application variables
  WEB_APP_VERSION: "1.0.0"
  API_VERSION: "2.0.0"
  DOCKER_REGISTRY: "$CI_REGISTRY"
  
  # Pipeline control variables
  ENABLE_MATRIX_BUILDS: "false"
  ENABLE_SECURITY_SCANS: "false"
  SKIP_DEPLOY: "false"

# Define stages for the pipeline
stages:
  - validate
  - build
  - test
  - security
  - child-pipelines
  - deploy
  - cleanup

# Global defaults
default:
  image: alpine:latest
  before_script:
    - echo "Pipeline ID- $CI_PIPELINE_ID"
    - echo "Branch- $CI_COMMIT_REF_NAME"
    - echo "Pipeline Source- $CI_PIPELINE_SOURCE"

# Include templates for reusable configurations
include:
  # Local includes for modular configuration
  - local: '.gitlab/ci/rules.yml'
  - local: '.gitlab/ci/variables.yml'
  # Conditional includes based on file changes
  - local: '.gitlab/ci/security.yml'
    rules:
      - if: '$ENABLE_SECURITY_SCANS == "true"'

# ============================================================================
# BASIC PIPELINE TRIGGERS SECTION
# ============================================================================

# 1. Basic Push Trigger - runs on every push
validate-syntax:
  stage: validate
  script:
    - echo "Validating YAML syntax and basic checks"
    - echo "Checking for required files..."
    - ls -la
    - echo "✅ Validation complete"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# 2. Merge Request Trigger - only on MR events
mr-quality-check:
  stage: validate
  script:
    - echo "🔍 Running quality checks for merge request"
    - echo "MR Target Branch- $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - echo "MR Source Branch- $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - echo "✅ Quality check passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# 3. Manual Trigger - requires manual intervention
manual-deployment-prep:
  stage: validate
  script:
    - echo "🚀 Preparing for manual deployment"
    - echo "This job requires manual approval"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

# 4. Conditional Trigger - based on file changes
frontend-build:
  stage: build
  script:
    - echo "🎨 Building frontend application"
    - mkdir -p dist/frontend
    - echo "Frontend build completed" > dist/frontend/index.html
  artifacts:
    paths:
      - dist/frontend/
    expire_in: 1 hour
  rules:
    - changes:
        - "frontend/**/*"
        - "package.json"
      when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

backend-build:
  stage: build
  script:
    - echo "⚙️ Building backend API"
    - mkdir -p dist/backend
    - echo "Backend API ready" > dist/backend/app.jar
  artifacts:
    paths:
      - dist/backend/
    expire_in: 1 hour
  rules:
    - changes:
        - "backend/**/*"
        - "requirements.txt"
      when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================================================
# PARENT-CHILD PIPELINES SECTION
# ============================================================================

# Generate dynamic child pipeline configuration
generate-child-pipeline:
  stage: build
  image: alpine:latest
  script:
    - echo "📋 Generating dynamic child pipeline configuration"
    - ./scripts/generate-child-pipeline.sh
  artifacts:
    paths:
      - generated-child-pipeline.yml
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Static Child Pipeline - Predefined configuration
trigger-static-child:
  stage: child-pipelines
  trigger:
    include: '.gitlab/ci/child-static.yml'
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    CHILD_TYPE: "static"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Dynamic Child Pipeline - Generated configuration
trigger-dynamic-child:
  stage: child-pipelines
  trigger:
    include:
      - artifact: generated-child-pipeline.yml
        job: generate-child-pipeline
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    CHILD_TYPE: "dynamic"
  needs:
    - job: generate-child-pipeline
      artifacts: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================================================
# MULTI-PROJECT PIPELINES SECTION
# ============================================================================

# Cross-project trigger example
# Note: This requires additional projects to be set up in your GitLab instance
trigger-downstream-project:
  stage: deploy
  trigger:
    # In a real scenario, this would reference another project
    # project: group/downstream-project
    # For demo purposes, we'll use a local trigger
    include: '.gitlab/ci/downstream-simulation.yml'
    strategy: depend
  variables:
    UPSTREAM_PROJECT: $CI_PROJECT_NAME
    UPSTREAM_COMMIT: $CI_COMMIT_SHA
    DEPLOYMENT_ENVIRONMENT: production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

# ============================================================================
# ADVANCED WORKFLOW PATTERNS SECTION
# ============================================================================

# Matrix Build Pattern - Multiple configurations
.matrix-job-template:
  stage: test
  script:
    - echo "🧪 Testing with $TECH_STACK version $VERSION"
    - echo "Environment- $ENVIRONMENT"
    - echo "Running tests..."
    - sleep 2
    - echo "✅ Tests passed for $TECH_STACK $VERSION"
  rules:
    - if: '$ENABLE_MATRIX_BUILDS == "true"'

matrix-tests:
  extends: .matrix-job-template
  parallel:
    matrix:
      - TECH_STACK: "node"
        VERSION: ["16", "18", "20"]
        ENVIRONMENT: ["test", "staging"]
      - TECH_STACK: "python"
        VERSION: ["3.9", "3.10", "3.11"]
        ENVIRONMENT: ["test"]

# Retry Pattern with conditional retry
flaky-integration-test:
  stage: test
  script:
    - echo "🔄 Running integration tests (may be flaky)"
    - ./scripts/run-integration-tests.sh
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - scheduler_failure
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Environment-based deployment pattern
.deploy-template: &deploy_template
  stage: deploy
  script:
    - echo "🚀 Deploying to $DEPLOY_ENVIRONMENT"
    # - echo "Target URL: https://$DEPLOY_ENVIRONMENT.example.com"
    - ./scripts/deploy.sh $DEPLOY_ENVIRONMENT
  artifacts:
    reports:
      dotenv: deployment.env

deploy-staging:
  <<: *deploy_template
  environment:
    name: staging
    url: https://staging.example.com
  variables:
    DEPLOY_ENVIRONMENT: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual

deploy-production:
  <<: *deploy_template
  environment:
    name: production
    url: https://production.example.com
  variables:
    DEPLOY_ENVIRONMENT: production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  needs:
    - job: deploy-staging
      optional: true

# ============================================================================
# SCHEDULED PIPELINE EXAMPLES
# ============================================================================

# This job demonstrates scheduled pipeline behavior
scheduled-maintenance:
  stage: cleanup
  script:
    - echo "🧹 Running scheduled maintenance tasks"
    - echo "Cleaning up old artifacts..."
    - echo "Checking system health..."
    - echo "Generating reports..."
    - echo "✅ Maintenance completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

# Nightly build simulation
nightly-build:
  stage: build
  script:
    - echo "🌙 Running nightly build process"
    - echo "Building all components..."
    - echo "Running extended test suite..."
    - echo "Generating documentation..."
  artifacts:
    paths:
      - nightly-build-report.txt
    expire_in: 7 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB_TYPE == "nightly"'

# ============================================================================
# CLEANUP AND FINALIZATION
# ============================================================================

# Pipeline summary job
pipeline-summary:
  stage: cleanup
  script:
    - echo "📊 Pipeline Summary"
    - echo "================================"
    - echo "Pipeline ID- $CI_PIPELINE_ID"
    - echo "Triggered by- $CI_PIPELINE_SOURCE"
    - echo "Branch- $CI_COMMIT_REF_NAME"
    - echo "Commit- $CI_COMMIT_SHA"
    - echo "Jobs completed- $(cat completed_jobs.txt 2>/dev/null | wc -l || echo 0)"
    - echo "✅ Pipeline completed successfully"
  rules:
    - when: always
  dependencies: []