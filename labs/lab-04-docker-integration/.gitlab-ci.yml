# Enhanced Docker pipeline with security and optimization
include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

variables:
  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  
  # Image naming
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  DEV_IMAGE: $REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA
  STAGING_IMAGE: $REGISTRY_IMAGE:staging-$CI_COMMIT_SHORT_SHA
  PROD_IMAGE: $REGISTRY_IMAGE:$CI_COMMIT_TAG
  LATEST_IMAGE: $REGISTRY_IMAGE:latest

services:
  - docker:24-dind

stages:
  - validate
  - build
  - test
  - security
  - deploy
  - promote

# Stage 1: Validation and Preparation
docker-lint:
  stage: validate
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint docker/Dockerfile.production
    - hadolint docker/Dockerfile.development
  allow_failure: true

# Stage 2: Multi-environment builds
build-dev-image:
  stage: build
  image: docker:24
  script:
    - echo "Building development image..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      docker build \
        --file docker/Dockerfile.development \
        --tag $DEV_IMAGE \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_REF_NAME \
        .
    - docker push $DEV_IMAGE
  only:
    - develop
    - feature/*

build-production-image:
  stage: build
  image: docker:24
  script:
    - echo "Building production image..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      docker build \
        --file docker/Dockerfile.production \
        --tag $STAGING_IMAGE \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_REF_NAME \
        .
    - docker push $STAGING_IMAGE
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag $STAGING_IMAGE $LATEST_IMAGE
        docker push $LATEST_IMAGE
      fi
  only:
    - main
    - tags

# Stage 3: Container Testing
test-container-dev:
  stage: test
  image: docker:24
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $DEV_IMAGE
    - echo "Testing development container..."
    - docker run --rm -d --name test-app -p 3000:3000 $DEV_IMAGE
    - sleep 10
    - docker exec test-app npm test
    - docker stop test-app
  dependencies:
    - build-dev-image
  only:
    - develop
    - feature/*

test-container-production:
  stage: test
  image: docker:24
  services:
    - redis:alpine
    - postgres:13-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_pass
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $STAGING_IMAGE
    - echo "Testing production container..."
    
    # Start container with health checks
    - |
      docker run --rm -d --name prod-test \
        -p 3000:3000 \
        -e NODE_ENV=production \
        -e REDIS_URL=redis://redis:6379 \
        -e DATABASE_URL=postgresql://test_user:test_pass@postgres:5432/test_db \
        $STAGING_IMAGE
    
    # Wait for health check
    - timeout 60 sh -c 'until docker exec prod-test curl -f http://localhost:3000/health; do sleep 2; done'
    
    # Run tests
    - docker exec prod-test npm run test
    
    # Performance test
    - |
      docker run --rm --network container:prod-test \
        alpine/curl \
        -s -o /dev/null -w "%{http_code} %{time_total}s\n" \
        http://localhost:3000/health
    
    - docker stop prod-test
  dependencies:
    - build-production-image
  only:
    - main
    - tags

# Stage 4: Advanced Security Scanning
trivy-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - echo "Scanning image for vulnerabilities..."
    - trivy image --exit-code 0 --format template --template "@contrib/sarif.tpl" -o trivy-report.sarif $STAGING_IMAGE
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $STAGING_IMAGE
  artifacts:
    reports:
      sast: trivy-report.sarif
  dependencies:
    - build-production-image
  only:
    - main
    - tags

grype-scan:
  stage: security
  image: anchore/grype:latest
  script:
    - grype $STAGING_IMAGE -o sarif > grype-report.sarif
    - grype $STAGING_IMAGE
  artifacts:
    reports:
      sast: grype-report.sarif
  allow_failure: true
  dependencies:
    - build-production-image
  only:
    - main
    - tags

# Stage 5: Deployment
deploy-staging:
  stage: deploy
  image: docker:24
  script:
    - echo "Deploying to staging environment..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      docker run --rm -d --name staging-app \
        -p 3001:3000 \
        -e NODE_ENV=staging \
        -e PORT=3000 \
        --restart unless-stopped \
        $STAGING_IMAGE
    - echo "Staging deployment complete"
    - echo "Application available at http://staging.yourdomain.com"
  environment:
    name: staging
    url: http://staging.yourdomain.com
  dependencies:
    - test-container-production
  only:
    - main

deploy-production:
  stage: deploy
  image: docker:24
  script:
    - echo "Deploying to production..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        docker tag $STAGING_IMAGE $PROD_IMAGE
        docker push $PROD_IMAGE
        echo "Production image tagged: $PROD_IMAGE"
      fi
    - echo "Production deployment complete"
  environment:
    name: production
    url: https://yourdomain.com
  when: manual
  only:
    - tags

# Stage 6: Image Promotion
promote-to-latest:
  stage: promote
  image: docker:24
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $PROD_IMAGE
    - docker tag $PROD_IMAGE $REGISTRY_IMAGE:stable
    - docker push $REGISTRY_IMAGE:stable
    - echo "Image promoted to stable"
  only:
    - tags
  when: manual
