# Renovate Runner Template - Include in Other Projects
# Usage: include this file in your project's .gitlab-ci.yml
#
# Example:
# include:
#   - project: 'your-group/renovate-runner'
#     file: '/templates/renovate-runner.gitlab-ci.yml'
#
# Required Variables:
# - RENOVATE_TOKEN: GitLab Personal Access Token
# - GITHUB_COM_TOKEN: GitHub token for package metadata (optional but recommended)

variables:
  # Core Renovate Configuration
  RENOVATE_BASE_DIR: $CI_PROJECT_DIR/renovate
  RENOVATE_ENDPOINT: $CI_API_V4_URL
  RENOVATE_PLATFORM: gitlab
  
  # Performance Settings
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  
  # Logging Configuration  
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: info
  LOG_FORMAT: json
  
  # Docker Image - Pin to specific version for stability
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  
  # Default Onboarding Config
  RENOVATE_ONBOARDING_CONFIG: |
    {
      "$schema": "https://docs.renovatebot.com/renovate-schema.json",
      "extends": ["config:recommended"]
    }

# Base configuration for all Renovate jobs
.renovate-template:
  image:
    name: ${CI_RENOVATE_IMAGE}
    pull_policy: always
  cache:
    key: ${CI_COMMIT_REF_SLUG}-renovate
    paths:
      - renovate/cache/renovate/repository/
      - renovate/cache/others/
  before_script:
    - echo "=== Renovate Runner Template ==="
    - echo "Renovate version $(renovate --version)"
    - echo "GitLab API endpoint $RENOVATE_ENDPOINT"
    - echo "Platform $RENOVATE_PLATFORM"
    - mkdir -p renovate/logs renovate/cache
  artifacts:
    when: always
    expire_in: 7d
    paths:
      - '$LOG_FILE'
      - 'renovate/logs/'
      - 'renovate-summary.json'
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Standard Renovate execution (for scheduled pipelines)
renovate-run:
  extends: .renovate-template
  stage: renovate
  resource_group: renovate-execution
  timeout: 90m
  script:
    - |
      # Execute Renovate
      echo "Starting Renovate execution at $(date)"
      renovate $RENOVATE_EXTRA_FLAGS
      
      # Generate execution summary
      cat > renovate-summary.json << EOF
      {
        "execution_time": "$(date -Iseconds)",
        "repository": "$CI_PROJECT_PATH",
        "commit": "$CI_COMMIT_SHA",
        "pipeline_id": "$CI_PIPELINE_ID",
        "triggered_by": "$CI_PIPELINE_SOURCE"
      }
      EOF
      
      echo "Renovate execution completed at $(date)"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  coverage: '/Renovate completed/'

# Dry-run for testing (manual trigger)
renovate-dry-run:
  extends: .renovate-template
  stage: renovate
  variables:
    RENOVATE_DRY_RUN: full
  script:
    - echo "Running Renovate in dry-run mode"
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - when: manual
      allow_failure: true
  coverage: '/Dry run completed/'

# Configuration validator (runs on config changes)
renovate-validate:
  image: node:18-alpine
  stage: validate
  before_script:
    - npm install -g renovate
  script:
    - |
      echo "Validating Renovate configuration files"
      
      # Validate renovate.json if it exists
      if [ -f "renovate.json" ]; then
        echo "Validating renovate.json..."
        renovate-config-validator renovate.json
        echo "✓ renovate.json is valid"
      fi
      
      # Validate config.js if it exists
      if [ -f "config.js" ]; then
        echo "Validating config.js..."
        node -c config.js
        echo "✓ config.js syntax is valid"
      fi
      
      # Validate any preset files
      for preset in configs/presets/*.json; do
        if [ -f "$preset" ]; then
          echo "Validating preset $preset..."
          renovate-config-validator "$preset"
          echo "✓ $preset is valid"
        fi
      done
  rules:
    - changes:
        - renovate.json
        - config.js
        - configs/**/*.json
        - .renovaterc*
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
  artifacts:
    when: always
    expire_in: 1d
    reports:
      junit: validation-report.xml

# Repository onboarding helper
renovate-onboard:
  extends: .renovate-template
  stage: renovate
  variables:
    RENOVATE_ONBOARDING: 'true'
    RENOVATE_REQUIRE_CONFIG: 'ignored'
  script:
    - echo "Running Renovate onboarding for repository discovery"
    - renovate --onboarding=true --require-config=ignored $RENOVATE_EXTRA_FLAGS
  rules:
    - when: manual
      allow_failure: true

# Security-only updates (high priority)
renovate-security:
  extends: .renovate-template
  stage: renovate
  variables:
    RENOVATE_VULNERABILITY_ALERTS: enabled
    RENOVATE_OSV_VULNERABILITY_ALERTS: 'true'
  script:
    - echo "Running security-focused Renovate updates"
    - renovate --vulnerability-alerts=enabled --osv-vulnerability-alerts=true $RENOVATE_EXTRA_FLAGS
  rules:
    - when: manual
      allow_failure: true
  artifacts:
    reports:
      # Security scanning results
      sast: renovate-security.json