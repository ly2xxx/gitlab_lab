# High-Performance Renovate Template with Advanced Caching
# Optimized for large-scale deployments with multiple repositories

variables:
  # Performance-optimized settings
  RENOVATE_BASE_DIR: $CI_PROJECT_DIR/renovate
  RENOVATE_ENDPOINT: $CI_API_V4_URL
  RENOVATE_PLATFORM: gitlab
  
  # Advanced caching configuration
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REPOSITORY_CACHE_TYPE: s3  # Options: file, s3, redis
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  
  # Performance tuning
  RENOVATE_PR_CONCURRENT_LIMIT: 20
  RENOVATE_BRANCH_CONCURRENT_LIMIT: 20
  RENOVATE_HTTP_TIMEOUT: 60000
  
  # Logging - reduced verbosity for performance
  LOG_FILE_LEVEL: info
  LOG_FORMAT: json
  
  # Docker image with full dependencies
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41-full

.renovate-performance:
  image:
    name: ${CI_RENOVATE_IMAGE}
    pull_policy: if-not-present  # Faster pulls
  # Multi-level caching strategy
  cache:
    - key: renovate-repository-${CI_COMMIT_REF_SLUG}
      paths:
        - renovate/cache/renovate/repository/
      policy: pull-push
    - key: renovate-npm-global
      paths:
        - .npm/
        - node_modules/
      policy: pull-push
    - key: renovate-others-${CI_COMMIT_REF_SLUG}
      paths:
        - renovate/cache/others/
      policy: pull-push
  # Performance-oriented before_script
  before_script:
    - echo "=== High-Performance Renovate Runner ==="
    - echo "Image $(renovate --version)"
    - echo "Available memory $(free -h | grep Mem)"
    - |
      # Pre-create cache directories
      mkdir -p renovate/cache/{renovate/repository,others}
      mkdir -p renovate/logs .npm
      
      # Set memory limits for Node.js
      export NODE_OPTIONS="--max-old-space-size=4096"
      
      # Configure Git for better performance
      git config --global core.preloadindex true
      git config --global core.fscache true
      git config --global gc.auto 256
  variables:
    # Memory settings for large repositories
    NODE_OPTIONS: "--max-old-space-size=4096"
    # Parallel processing
    RENOVATE_CONCURRENT_LIMIT: 10
    # Cache optimization
    RENOVATE_REPOSITORY_CACHE_TYPE: enabled
  artifacts:
    when: always
    expire_in: 30d
    paths:
      - renovate-log.ndjson
      - renovate/logs/
      - cache-stats.json
  retry:
    max: 3
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - api_failure

# High-performance repository updates
renovate-performance:
  extends: .renovate-performance
  stage: renovate
  resource_group: renovate-performance
  timeout: 3h  # Extended timeout for large operations
  parallel:
    matrix:
      # Process repositories in parallel batches
      - RENOVATE_AUTODISCOVER_FILTER: ["group1/*", "group2/*", "group3/*"]
  script:
    - |
      echo "Starting high-performance Renovate execution"
      echo "Processing repositories matching: $RENOVATE_AUTODISCOVER_FILTER"
      
      # Record start time
      START_TIME=$(date +%s)
      
      # Execute Renovate with performance monitoring
      (
        renovate --autodiscover=true --autodiscover-filter="$RENOVATE_AUTODISCOVER_FILTER" $RENOVATE_EXTRA_FLAGS
      ) 2>&1 | tee renovate-log.ndjson
      
      # Calculate execution time
      END_TIME=$(date +%s)
      DURATION=$((END_TIME - START_TIME))
      
      # Generate performance metrics
      cat > cache-stats.json << EOF
      {
        "execution_duration_seconds": $DURATION,
        "cache_dir_size_mb": $(du -sm renovate/cache/ | cut -f1),
        "log_entries": $(wc -l < renovate-log.ndjson),
        "filter": "$RENOVATE_AUTODISCOVER_FILTER",
        "timestamp": "$(date -Iseconds)"
      }
      EOF
      
      echo "Performance metrics:"
      cat cache-stats.json
      
      echo "Execution completed in ${DURATION} seconds"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RENOVATE_HIGH_PERFORMANCE == "true"'
    - when: manual
      allow_failure: false

# Cache warming job - runs before main renovate job
warm-cache:
  extends: .renovate-performance
  stage: .pre
  script:
    - |
      echo "Warming up Renovate caches"
      
      # Pre-download common dependencies
      npm install -g npm@latest
      
      # Warm up repository cache with dry-run
      renovate --dry-run=extract --autodiscover=true --autodiscover-filter="$RENOVATE_CACHE_WARM_FILTER" || true
      
      # Generate cache statistics
      echo "Cache warming completed"
      echo "Repository cache size: $(du -sh renovate/cache/renovate/repository/ 2>/dev/null || echo '0')"
      echo "Other cache size: $(du -sh renovate/cache/others/ 2>/dev/null || echo '0')"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RENOVATE_WARM_CACHE == "true"'
    - when: manual
      allow_failure: true

# Cache cleanup job - runs after main renovate job  
cleanup-cache:
  extends: .renovate-performance
  stage: .post
  script:
    - |
      echo "Cleaning up old cache entries"
      
      # Remove cache entries older than 7 days
      find renovate/cache/ -type f -mtime +7 -delete 2>/dev/null || true
      
      # Keep only the last 100MB of logs
      if [ -d "renovate/logs" ]; then
        find renovate/logs -type f -name "*.log" -exec ls -la {} + | sort -k5 -nr | tail -n +20 | awk '{print $9}' | xargs rm -f
      fi
      
      echo "Cache cleanup completed"
      echo "Final cache size: $(du -sh renovate/cache/ 2>/dev/null || echo '0')"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: on_success
    - when: manual
      allow_failure: true