# GitLab CI/CD Pipeline for Node.js Renovate Sample Project
# Demonstrates integration with Renovate automated dependency updates

stages:
  - validate
  - test
  - security
  - build
  - deploy

variables:
  NODE_VERSION: "18"
  NPM_CONFIG_CACHE: .npm
  DOCKER_IMAGE: renovate-test-nodejs
  
cache:
  key: ${CI_COMMIT_REF_SLUG}-node
  paths:
    - .npm/
    - node_modules/

# Base template for Node.js jobs
.node-job: &node-job
  image: node:${NODE_VERSION}
  before_script:
    - npm ci --cache .npm --prefer-offline

# Validate package.json and dependencies
validate-package:
  <<: *node-job
  stage: validate
  script:
    - echo "Validating package.json structure"
    - npm ls --depth=0
    - echo "Checking for security vulnerabilities"
    - npm audit --audit-level=moderate
    - echo "Validating Renovate configuration"
    - npx renovate-config-validator renovate.json
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - changes:
        - package.json
        - package-lock.json
        - renovate.json

# Unit tests
test-unit:
  <<: *node-job
  stage: test
  script:
    - npm run test:unit
  artifacts:
    when: always
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'

# Integration tests  
test-integration:
  <<: *node-job
  stage: test
  script:
    - npm run test:integration
  artifacts:
    when: always
    reports:
      junit: junit-integration.xml

# Code linting
lint:
  <<: *node-job
  stage: test
  script:
    - npm run lint
  artifacts:
    when: on_failure
    paths:
      - lint-report.json

# Security audit
security-audit:
  <<: *node-job
  stage: security
  script:
    - echo "Running security audit"
    - npm audit --audit-level=moderate --json | tee audit-report.json
    - echo "Security linting"
    - npm run lint -- --format json -o eslint-security.json
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - audit-report.json
      - eslint-security.json
    reports:
      sast: audit-report.json
  allow_failure: true

# SAST using Semgrep
sast-semgrep:
  stage: security
  image: 
    name: returntocorp/semgrep:latest
    entrypoint: [""]
  script:
    - semgrep --config=auto --json --output=semgrep-report.json src/
  artifacts:
    when: always
    reports:
      sast: semgrep-report.json
  allow_failure: true

# Docker build and scan
build-docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
  script:
    - echo "Building Docker image"
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHA .
    - echo "Scanning image for vulnerabilities"
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock 
      -v $PWD/trivy-cache:/root/.cache/ 
      aquasec/trivy:latest image 
      --format json --output trivy-report.json $DOCKER_IMAGE:$CI_COMMIT_SHA
  artifacts:
    when: always
    paths:
      - trivy-report.json
    reports:
      container_scanning: trivy-report.json
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# Deploy to staging (triggered by successful Renovate MRs)
deploy-staging:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying to staging environment"
    - echo "Application version: $CI_COMMIT_SHA"
    - echo "Deployed at: $(date)"
  environment:
    name: staging
    url: https://staging.example.com
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    - if: '$GITLAB_USER_LOGIN == "renovate-bot" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success

# Renovate-specific job: Auto-approve minor updates
auto-approve-renovate:
  stage: validate
  image: alpine/git:latest
  script:
    - echo "Checking if this is a Renovate MR for auto-approval"
    - |
      if [[ "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" =~ ^renovate/ ]] && 
         [[ "$GITLAB_USER_LOGIN" == "renovate-bot" ]]; then
        echo "This is a Renovate MR"
        
        # Check if it's a minor/patch update by analyzing the branch name
        if [[ "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" =~ (patch|minor) ]]; then
          echo "Minor/patch update detected - would auto-approve"
          echo "MR: $CI_MERGE_REQUEST_IID"
          echo "Branch: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
          # In a real scenario, you would call GitLab API to approve the MR
        else
          echo "Major update detected - manual review required"
        fi
      else
        echo "Not a Renovate MR"
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  allow_failure: true

# Post-merge: Update dependency dashboard
update-dependency-status:
  stage: .post
  image: alpine:latest  
  script:
    - echo "Updating dependency dashboard"
    - echo "Successful updates processed by Renovate"
    - echo "Commit: $CI_COMMIT_SHA"
    - echo "Pipeline: $CI_PIPELINE_ID"
  rules:
    - if: '$GITLAB_USER_LOGIN == "renovate-bot" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  allow_failure: true