# Lab 11: Git Branch Operations from Pipeline
# Demonstrates feature branch creation, code modification, and merge requests

stages:
  - check
  - setup-and-update
  - commit-and-merge-request

variables:
  # Feature branch name with timestamp for uniqueness
  FEATURE_BRANCH: "feature/update-base-images-${CI_PIPELINE_ID}"
  # Target base branch
  BASE_BRANCH: "main"

# Common script blocks to reduce duplication
.scripts:
  git-user-config: &git-user-config
    - git config --global user.email "${GITLAB_USER_EMAIL:-ci@example.com}"
    - git config --global user.name "${GITLAB_USER_NAME:-GitLab CI}"
  
  api-tools-install: &api-tools-install
    - apk add --no-cache curl jq git

# Job 0: Check if Docker image updates are needed
check-updates:
  stage: check
  image: alpine:latest
  rules:
    # Only run on main branch, exclude merge requests
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
    # Manual trigger option
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  before_script:
    - apk add --no-cache git curl jq
  script:
    - |
      # Function to check if updates are available (without modifying files)
      check_image_update() {
        local image_name="$1"
        local tag_filter="$2"
        local sort_method="$3"
        local display_name="$4"
        
        echo "Checking for $display_name updates..."
        local response=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/$image_name/tags/?page_size=100")
        
        if [ $? -eq 0 ] && [ -n "$response" ]; then
          # Extract latest tag based on filter pattern
          local latest_tag=$(echo "$response" | grep -o '"name":"[^"]*"' | sed 's/"name":"//g' | sed 's/"//g' | grep -E "$tag_filter" | sort $sort_method | tail -1)
          
          if [ -n "$latest_tag" ]; then
            echo "Latest $display_name tag available - $latest_tag"
            
            # Check current version in Dockerfile (if it exists)
            if [ -f "sample-app/Dockerfile" ]; then
              local current_version=$(grep -oE "FROM $image_name:[^[:space:]]+" sample-app/Dockerfile | sed "s/FROM $image_name://" || echo "")
              
              if [ -n "$current_version" ]; then
                echo "Current $display_name version - $current_version"
                if [ "$current_version" != "$latest_tag" ]; then
                  echo "✓ Update available - $image_name:$current_version → $image_name:$latest_tag"
                  return 0  # Update needed
                else
                  echo "- No update needed - $image_name:$current_version is already latest"
                  return 1  # No update needed
                fi
              else
                echo "- No $display_name base image found in Dockerfile"
                return 1  # No update needed
              fi
            else
              echo "- No Dockerfile found, will need to create sample files"
              return 0  # Update needed (file creation)
            fi
          else
            echo "Could not parse $display_name tags from API response"
            return 1  # No update needed (API issue)
          fi
        else
          echo "Could not fetch $display_name tags from Docker Hub API"
          return 1  # No update needed (API issue)
        fi
      }

      # Check all image types
      updates_needed=false

      # Check Python slim image
      if check_image_update "python" "^[0-9]+\.[0-9]+(\.[0-9]+)?-slim$" "-V" "Python slim"; then
        updates_needed=true
      fi

      # Check Node.js LTS image
      if check_image_update "node" "^[0-9]+$" "-n" "Node.js LTS"; then
        updates_needed=true
      fi

      # Check Alpine image
      if check_image_update "alpine" "^[0-9]+\.[0-9]+(\.[0-9]+)?$" "-V" "Alpine"; then
        updates_needed=true
      fi

      # Output results
      if [ "$updates_needed" = "true" ]; then
        echo ""
        echo "🔄 Docker image updates are available - pipeline will continue"
        echo "UPDATES_NEEDED=true" > updates.env
      else
        echo ""
        echo "✅ All Docker images are up to date - skipping remaining jobs"
        echo "UPDATES_NEEDED=false" > updates.env
      fi
  artifacts:
    reports:
      dotenv: updates.env
    paths:
      - updates.env
    expire_in: 1 hour

# Job 1: Setup branch and update Docker images (conditional)
setup-and-update:
  stage: setup-and-update
  image: alpine:latest
  needs: ["check-updates"]
  dependencies:
    - check-updates
  rules:
    # Always run on main branch, exclude merge requests
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
    # Manual trigger option
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  before_script:
    - apk add --no-cache git curl jq
    - !reference [.scripts, git-user-config]
    - git config --global init.defaultBranch main
  script:
    # Check if updates are needed (script-level conditional)
    - |
      if [ "${UPDATES_NEEDED}" != "true" ]; then
        echo "✅ No Docker image updates needed - skipping branch creation and updates"
        echo "CHANGES_MADE=false" > changes.env
        echo "FEATURE_BRANCH=" > branch.env
        exit 0
      fi

    # Clean up any artifact files that might conflict with git checkout
    - rm -f branch.env changes.env
    
    # Setup repository authentication
    - REPO_URL="$(echo ${CI_PROJECT_URL} | sed 's|://|://oauth2:'${ACCESS_TOKEN}'@|')"
    - echo "Repository URL configured - ${REPO_URL}"
    - git remote set-url origin "${REPO_URL}"
    - git fetch origin
    
    # Create feature branch
    - echo "Creating feature branch ${FEATURE_BRANCH}"
    - git checkout -b "${FEATURE_BRANCH}" origin/${BASE_BRANCH}
    - git push -u origin "${FEATURE_BRANCH}" -o ci.skip
    - echo "Feature branch created ${FEATURE_BRANCH}"
    - echo "FEATURE_BRANCH=${FEATURE_BRANCH}" > branch.env
    
    # Update Docker base images in sample-app/Dockerfile
    - |
      # Define reusable function for updating Docker base images
      update_base_image() {
        local image_name="$1"
        local tag_filter="$2"
        local sort_method="$3"
        local display_name="$4"
        local show_detailed_output="$5"
        
        echo "Querying Docker Hub API for latest $display_name image..."
        local response=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/$image_name/tags/?page_size=100")
        
        if [ $? -eq 0 ] && [ -n "$response" ]; then
          # Extract tags based on the filter pattern
          local latest_tag=$(echo "$response" | grep -o '"name":"[^"]*"' | sed 's/"name":"//g' | sed 's/"//g' | grep -E "$tag_filter" | sort $sort_method | tail -1)
          
          if [ -n "$latest_tag" ]; then
            echo "Latest $display_name tag found - $latest_tag"
            local current_version=$(grep -oE "FROM $image_name:[^[:space:]]+" sample-app/Dockerfile | sed "s/FROM $image_name://" || echo "")
            
            if [ -n "$current_version" ]; then
              echo "Current $display_name version - $current_version"
              echo "Updating $display_name base image from $image_name:$current_version to $image_name:$latest_tag"
              
              # Show detailed output only for the first image (Python)
              if [ "$show_detailed_output" = "true" ]; then
                echo "=== Dockerfile content BEFORE update ==="
                cat sample-app/Dockerfile
                echo "=== END BEFORE ==="
              fi
              
              # Escape special characters in version strings
              local escaped_current=$(echo "$current_version" | sed 's/[[\.*^$()+?{|]/\\&/g')
              local escaped_new=$(echo "$latest_tag" | sed 's/[[\.*^$()+?{|]/\\&/g')
              
              echo "Executing sed command for $display_name update"
              sed -i "s/FROM $image_name:$escaped_current/FROM $image_name:$escaped_new/g" sample-app/Dockerfile
              
              # Show detailed output only for the first image (Python)
              if [ "$show_detailed_output" = "true" ]; then
                echo "=== Dockerfile content AFTER update ==="
                cat sample-app/Dockerfile
                echo "=== END AFTER ==="
              fi
              
              # Verify the change was made
              if grep -q "FROM $image_name:$latest_tag" sample-app/Dockerfile; then
                echo "✓ $display_name base image successfully updated to $latest_tag"
              else
                echo "✗ ERROR: $display_name base image update failed"
                grep "FROM $image_name:" sample-app/Dockerfile || echo "No $display_name FROM line found"
              fi
            else
              echo "No $display_name base image found in Dockerfile"
            fi
          else
            echo "Could not parse $display_name tags from API response"
          fi
        else
          echo "Could not fetch $display_name tags from Docker Hub API, keeping current version"
        fi
      }

      if [ -f "sample-app/Dockerfile" ]; then
        echo "Current branch: $(git branch --show-current)"
        echo "Current Dockerfile content:"
        cat sample-app/Dockerfile
        
        # Update Python slim image (with detailed output)
        update_base_image "python" "^[0-9]+\.[0-9]+(\.[0-9]+)?-slim$" "-V" "Python slim" "true"
        
        # Update Node.js LTS image (numeric tags only)
        update_base_image "node" "^[0-9]+$" "-n" "Node.js LTS" "false"
        
        # Update Alpine image (version tags)
        update_base_image "alpine" "^[0-9]+\.[0-9]+(\.[0-9]+)?$" "-V" "Alpine" "false"
        
        echo "Updated Dockerfile content"
        cat sample-app/Dockerfile
        
        # Check if any changes were made
        if git diff --quiet; then
          echo "No changes made to Dockerfile"
        else
          echo "Changes detected in Dockerfile"
        fi
      else
        echo "No Dockerfile found, creating sample files"
        mkdir -p sample-app scripts
        chmod +x scripts/create-sample-files.sh
        ./scripts/create-sample-files.sh
      fi
    
    # Stage changes and check if we have any modifications
    - git add .
    - |
      if git diff --staged --quiet; then
        echo "No staged changes to commit"
        echo "CHANGES_MADE=false" >> changes.env
      else
        echo "Changes staged successfully"
        echo "CHANGES_MADE=true" >> changes.env
        
        # Commit the changes immediately in this job to ensure they persist
        echo "Committing Dockerfile changes in update job"
        git commit -m "chore: update Docker base images
        
        - Updated Python base image version
        - Updated Node.js base image version  
        - Updated Alpine base image version
        
        Automated update via GitLab CI Pipeline ${CI_PIPELINE_ID}"
        
        # Push the changes to the feature branch
        git push origin "${FEATURE_BRANCH}" -o ci.skip
        echo "Changes committed and pushed to ${FEATURE_BRANCH}"
      fi
  artifacts:
    reports:
      dotenv: [branch.env, changes.env]
    paths:
      - branch.env
      - changes.env
    expire_in: 1 hour

# Job 2: Commit changes and create merge request (conditional)
commit-and-merge-request:
  stage: commit-and-merge-request
  image: alpine:latest
  needs: ["check-updates", "setup-and-update"]
  dependencies:
    - check-updates
    - setup-and-update
  rules:
    # Always run on main branch, exclude merge requests
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
    # Manual trigger option
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  before_script:
    - !reference [.scripts, api-tools-install]
    - !reference [.scripts, git-user-config]
  script:
    # Check if updates were actually made (script-level conditional)
    - |
      if [ "${CHANGES_MADE}" != "true" ]; then
        echo "✅ No changes were made - skipping commit and merge request creation"
        exit 0
      fi

    # Check if feature branch was created
    - |
      if [ -z "${FEATURE_BRANCH}" ]; then
        echo "❌ No feature branch was created - cannot proceed with merge request"
        exit 1
      fi

    # The changes were already committed in setup-and-update job, so just create MR
    - echo "🔄 Creating merge request for ${FEATURE_BRANCH} -> ${BASE_BRANCH}"
    
    # Create merge request using GitLab API
    - |
      curl --request POST \
        --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" \
        --header "Content-Type: application/json" \
        --data "{
          \"source_branch\": \"${FEATURE_BRANCH}\",
          \"target_branch\": \"${BASE_BRANCH}\",
          \"title\": \"chore: update Docker base images (automated)\",
          \"description\": \"This merge request was automatically created by GitLab CI/CD pipeline ${CI_PIPELINE_ID}. Updated Docker base image versions in Dockerfiles.\",
          \"remove_source_branch\": true
        }" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests"
    
    - echo "✅ Merge request created for ${FEATURE_BRANCH} -> ${BASE_BRANCH}"

# Cleanup job - runs on failure to clean up feature branches
cleanup-on-failure:
  stage: commit-and-merge-request
  image: alpine:latest
  rules:
    - when: on_failure
  before_script:
    - apk add --no-cache git
  script:
    - git config --global user.email "${GITLAB_USER_EMAIL:-ci@example.com}"
    - git config --global user.name "${GITLAB_USER_NAME:-GitLab CI}"
    - REPO_URL="$(echo ${CI_PROJECT_URL} | sed 's|://|://oauth2:'${ACCESS_TOKEN}'@|')"
    - git remote set-url origin "${REPO_URL}"
    - git fetch origin
    - echo "Cleaning up feature branch ${FEATURE_BRANCH} due to pipeline failure"
    - git push origin --delete "${FEATURE_BRANCH}" || echo "Branch may not exist or already deleted"