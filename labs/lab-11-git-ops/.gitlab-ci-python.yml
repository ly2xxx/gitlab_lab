# Lab 11: Git Branch Operations from Pipeline (Python Version)
# Demonstrates feature branch creation, code modification, and merge requests using Python scripts

stages:
  - check
  - setup-and-update
  - commit-and-merge-request

variables:
  # Feature branch name with timestamp for uniqueness
  FEATURE_BRANCH: "feature/update-base-images-${CI_PIPELINE_ID}"
  # Target base branch
  BASE_BRANCH: "main"
  # Python version to use
  PYTHON_VERSION: "3.11"

# Common configuration for Python jobs
.python-base: &python-base
  image: python:${PYTHON_VERSION}-slim
  before_script:
    # Install system dependencies
    - apt-get update && apt-get install -y git curl
    # Install Python dependencies
    - pip install --no-cache-dir requests
    # Make Python scripts executable
    - chmod +x python/*.py
    # Add python directory to PATH for easier execution
    - export PATH="${PWD}/python:${PATH}"

# Job 1: Check if Docker image updates are needed
check-updates:
  stage: check
  <<: *python-base
  rules:
    # Only run on main branch, exclude merge requests
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
    # Manual trigger option
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  script:
    - echo "🔍 Checking for Docker image updates using Python script..."
    - python3 python/docker_image_checker.py
  artifacts:
    reports:
      dotenv: updates.env
    paths:
      - updates.env
    expire_in: 1 hour

# Job 2: Setup branch and update Docker images (conditional)
setup-and-update:
  stage: setup-and-update
  <<: *python-base
  needs: ["check-updates"]
  dependencies:
    - check-updates
  rules:
    # Always run on main branch, exclude merge requests
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
    # Manual trigger option
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  script:
    - echo "🚀 Setting up branch and updating Docker images using Python script..."
    - python3 python/git_operations.py setup
  artifacts:
    reports:
      dotenv: [branch.env, changes.env]
    paths:
      - branch.env
      - changes.env
    expire_in: 1 hour

# Job 3: Commit changes and create merge request (conditional)
commit-and-merge-request:
  stage: commit-and-merge-request
  <<: *python-base
  needs: ["check-updates", "setup-and-update"]
  dependencies:
    - check-updates
    - setup-and-update
  rules:
    # Always run on main branch, exclude merge requests
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
    # Manual trigger option
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  script:
    - echo "📝 Creating merge request using Python script..."
    - python3 python/gitlab_api.py create-mr

# Cleanup job - runs on failure to clean up feature branches
cleanup-on-failure:
  stage: commit-and-merge-request
  <<: *python-base
  rules:
    - when: on_failure
  script:
    - echo "🧹 Cleaning up on failure using Python script..."
    - python3 python/git_operations.py cleanup

# Alternative check using Claude API integration (manual job)
check-updates-with-claude-code:
  stage: check
  image: node:24-alpine3.21
  rules:
    - when: manual
      allow_failure: true
  before_script:
    # Install system dependencies
    - apk add --no-cache git
    # Install Claude Code for GitLab CI/CD
    - npm install -g @anthropic-ai/claude-code
  script:
    - echo "🤖 Checking for Docker image updates using Claude Code..."
    - |
      # Read the current Dockerfile
      if [ -f "sample-app/Dockerfile" ]; then
        DOCKERFILE_CONTENT=$(cat sample-app/Dockerfile)
        echo "Current Dockerfile:"
        echo "$DOCKERFILE_CONTENT"
        echo ""

        # Extract current Python version
        CURRENT_VERSION=$(grep "FROM python:" sample-app/Dockerfile | sed 's/FROM python://' | head -1)
        echo "Current Python image: $CURRENT_VERSION"

        # Use Claude Code to analyze Docker image updates
        CLAUDE_PROMPT="Check this Dockerfile for Docker image updates:

        $DOCKERFILE_CONTENT

        Current version is python:$CURRENT_VERSION. Can you check if there are newer stable versions of the python slim image available and recommend if an update is needed?

        Please format your response exactly as:
        CURRENT: [current version]
        LATEST: [latest available version]
        UPDATE_NEEDED: [yes/no]
        RECOMMENDATION: [brief explanation]"

        echo "Asking Claude Code to analyze Docker image updates..."

        # Run Claude Code and capture output
        if claude -p "$CLAUDE_PROMPT" > claude-output.txt 2>&1; then
          echo "✅ Claude Code analysis completed"
          echo "Claude's Response:"
          cat claude-output.txt
          echo ""

          # Parse Claude's response to create artifacts
          CLAUDE_RESPONSE=$(cat claude-output.txt)
          UPDATE_NEEDED=$(echo "$CLAUDE_RESPONSE" | grep "UPDATE_NEEDED:" | cut -d: -f2 | tr -d ' ')
          LATEST_VERSION=$(echo "$CLAUDE_RESPONSE" | grep "LATEST:" | cut -d: -f2 | tr -d ' ')

          # Create updates.env file for compatibility with existing pipeline
          if [ "$UPDATE_NEEDED" = "yes" ]; then
            echo "UPDATES_AVAILABLE=true" > updates.env
            echo "PYTHON_UPDATE_FROM=$CURRENT_VERSION" >> updates.env
            echo "PYTHON_UPDATE_TO=$LATEST_VERSION" >> updates.env
            echo "ANALYSIS_METHOD=claude-code" >> updates.env
            echo "🔄 Claude Code detected Docker image updates are available"
          else
            echo "UPDATES_AVAILABLE=false" > updates.env
            echo "ANALYSIS_METHOD=claude-code" >> updates.env
            echo "✅ Claude Code reports no updates needed"
          fi
        else
          echo "❌ Claude Code execution failed"
          echo "Error output:"
          cat claude-output.txt
          echo "UPDATES_AVAILABLE=error" > updates.env
          echo "ERROR=claude_code_failed" >> updates.env
          exit 1
        fi
      else
        echo "❌ sample-app/Dockerfile not found"
        echo "UPDATES_AVAILABLE=error" > updates.env
        echo "ERROR=dockerfile_not_found" >> updates.env
        exit 1
      fi
  artifacts:
    reports:
      dotenv: updates.env
    paths:
      - updates.env
      - claude-output.txt
    expire_in: 1 hour
    when: always

# Alternative check using Claude API integration (manual job)
check-updates-with-claude:
  stage: check
  image: node:18-alpine
  rules:
    - when: manual
      allow_failure: true
  before_script:
    # Install system dependencies
    - apk add --no-cache curl git jq
    # Install npm packages for Claude integration (if using official package)
    - npm install -g @anthropic/claude-cli 2>/dev/null || echo "Claude CLI not available, using curl approach"
  script:
    - echo "🤖 Checking for Docker image updates using Claude API..."
    - |
      # Read the current Dockerfile
      if [ -f "sample-app/Dockerfile" ]; then
        DOCKERFILE_CONTENT=$(cat sample-app/Dockerfile)
        echo "Current Dockerfile:"
        echo "$DOCKERFILE_CONTENT"
        echo ""

        # Extract current Python version
        CURRENT_VERSION=$(grep "FROM python:" sample-app/Dockerfile | sed 's/FROM python://' | head -1)
        echo "Current Python image: $CURRENT_VERSION"

        # Use Claude API to check for updates (properly escape JSON)
        PROMPT="I have this Dockerfile:

        $DOCKERFILE_CONTENT

        Can you check if there are newer versions of the Python base image available? Current version is $CURRENT_VERSION. Please check what the latest stable Python slim image version is and recommend if an update is needed. Format your response as:

        CURRENT: [current version]
        LATEST: [latest version]
        UPDATE_NEEDED: [yes/no]
        RECOMMENDATION: [brief explanation]"

                # Create JSON using jq to properly escape content
                jq -n \
                  --arg model "claude-3-sonnet-20240229" \
                  --arg prompt "$PROMPT" \
                  '{
                    model: $model,
                    max_tokens: 1000,
                    messages: [
                      {
                        role: "user",
                        content: $prompt
                      }
                    ]
                  }' > claude_request.json

        # Make API call to Claude
        if [ -n "$ANTHROPIC_API_KEY" ]; then
          echo "Making API call to Claude..."
          CLAUDE_RESPONSE=$(curl -s -X POST https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @claude_request.json)

          # Extract response content
          RESPONSE_TEXT=$(echo "$CLAUDE_RESPONSE" | jq -r '.content[0].text // empty')

          if [ -n "$RESPONSE_TEXT" ]; then
            echo "Claude's Analysis:"
            echo "$RESPONSE_TEXT"

            # Parse Claude's response to create artifacts
            UPDATE_NEEDED=$(echo "$RESPONSE_TEXT" | grep "UPDATE_NEEDED:" | cut -d: -f2 | tr -d ' ')
            LATEST_VERSION=$(echo "$RESPONSE_TEXT" | grep "LATEST:" | cut -d: -f2 | tr -d ' ')

            # Create updates.env file for compatibility with existing pipeline
            if [ "$UPDATE_NEEDED" = "yes" ]; then
              echo "UPDATES_AVAILABLE=true" > updates.env
              echo "PYTHON_UPDATE_FROM=$CURRENT_VERSION" >> updates.env
              echo "PYTHON_UPDATE_TO=$LATEST_VERSION" >> updates.env
              echo "ANALYSIS_METHOD=claude-api" >> updates.env
              echo "🔄 Claude detected Docker image updates are available"
            else
              echo "UPDATES_AVAILABLE=false" > updates.env
              echo "ANALYSIS_METHOD=claude-api" >> updates.env
              echo "✅ Claude reports no updates needed"
            fi
          else
            echo "❌ Failed to get valid response from Claude API"
            echo "Raw response: $CLAUDE_RESPONSE"
            echo "UPDATES_AVAILABLE=error" > updates.env
            echo "ERROR=claude_api_failed" >> updates.env
            exit 1
          fi
        else
          echo "❌ ANTHROPIC_API_KEY not set"
          echo "Please set ANTHROPIC_API_KEY as a masked CI/CD variable"
          echo "UPDATES_AVAILABLE=error" > updates.env
          echo "ERROR=missing_api_key" >> updates.env
          exit 1
        fi
      else
        echo "❌ sample-app/Dockerfile not found"
        echo "UPDATES_AVAILABLE=error" > updates.env
        echo "ERROR=dockerfile_not_found" >> updates.env
        exit 1
      fi
  artifacts:
    reports:
      dotenv: updates.env
    paths:
      - updates.env
      - claude_request.json
    expire_in: 1 hour
    when: always

# Optional utility jobs for debugging and testing

# Test Python scripts locally (manual job)
test-python-scripts:
  stage: check
  <<: *python-base
  rules:
    - when: manual
      allow_failure: true
  script:
    - echo "🧪 Testing Python scripts..."
    - echo "Testing Docker image checker..."
    - python3 -c "from python.docker_image_checker import DockerImageChecker; from python.utils import Config; print('✓ Docker checker imports work')"
    - echo "Testing GitLab API access..."
    - python3 python/gitlab_api.py check-access || echo "GitLab API test failed (expected if no ACCESS_TOKEN)"
    - echo "Testing file creator..."
    - python3 python/file_creator.py || echo "File creator test completed"
    - echo "✅ Python script tests completed"

# Validate Python code syntax (manual job)
validate-python-code:
  stage: check
  <<: *python-base
  rules:
    - when: manual
      allow_failure: true
  script:
    - echo "🔍 Validating Python code syntax..."
    - python3 -m py_compile python/*.py
    - echo "✅ All Python files have valid syntax"

# Show current Docker image versions (manual job)
show-current-versions:
  stage: check
  <<: *python-base
  rules:
    - when: manual
      allow_failure: true
  script:
    - echo "📋 Current Docker image versions..."
    - |
      if [ -f "sample-app/Dockerfile" ]; then
        echo "Current Dockerfile content:"
        cat sample-app/Dockerfile
        echo ""
        echo "FROM statements:"
        grep "^FROM" sample-app/Dockerfile
      else
        echo "No Dockerfile found"
      fi

# List current merge requests (manual job)
list-merge-requests:
  stage: check
  <<: *python-base
  rules:
    - when: manual
      allow_failure: true
  script:
    - echo "📋 Listing current merge requests..."
    - python3 python/gitlab_api.py list-mrs || echo "Failed to list MRs (may need ACCESS_TOKEN)"