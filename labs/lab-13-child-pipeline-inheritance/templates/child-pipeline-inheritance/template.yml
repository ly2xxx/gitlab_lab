# GitLab Component: Child Pipeline Inheritance
# Provides dynamic child pipeline generation with inheritance capabilities

spec:
  inputs:
    stage:
      description: "Pipeline stage for child pipeline jobs"
      default: "maintenance"
    enable_backend_build:
      description: "Enable backend build job"
      default: "true"
    enable_validation:
      description: "Enable syntax validation job"  
      default: "true"
    docker_image:
      description: "Docker image for pipeline generation"
      default: "ubuntu:latest"
    component_stages:
      description: "Stages to add to the pipeline"
      default: "validate,build,maintenance"

---

# Component variables including embedded scripts and echo functions
variables:
  # Standardized echo functions for logging
  ECHO_FUNCTIONS: |
    log_error() { echo -e "\033[31m[ERROR] ❌ $1\033[0m"; }
    log_warn() { echo -e "\033[33m[WARN] ⚠️ $1\033[0m"; }
    log_info() { echo -e "\033[32m[INFO] ℹ️ $1\033[0m"; }
    log_debug() { echo -e "\033[34m[DEBUG] 🔍 $1\033[0m"; }
  
  # Embedded child pipeline generation script
  CHILD_PIPELINE_GENERATOR_SCRIPT: |
    #!/bin/bash
    set -e
    
    # Load standardized echo functions
    eval "$ECHO_FUNCTIONS"
    
    log_info "🔧 Generating dynamic child pipeline configuration..."
    
    # Initialize the pipeline file
    PIPELINE_FILE="$CI_PROJECT_DIR/generated-child-pipeline.yml"
    GENERATION_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    
    # Start with basic structure
    cat > $PIPELINE_FILE << EOF
    # Dynamically Generated Child Pipeline
    # Generated by: Child Pipeline Inheritance Component
    
    include:
      - component: \$CI_SERVER_FQDN/\$CI_PROJECT_NAMESPACE/\$CI_PROJECT_NAME/child-pipeline-inheritance@main
    
    stages:
      - dynamic-analyze
      - dynamic-build
      - dynamic-test
      - dynamic-deploy
    
    variables:
      CHILD_PIPELINE_TYPE: "dynamic"
      GENERATION_TIME: "$GENERATION_TIME"
    
    default:
      before_script:
        - eval "\$ECHO_FUNCTIONS"
        - log_info "🔗 Dynamic Child Pipeline - ID- \$CI_PIPELINE_ID"
        - log_info "📋 Parent Pipeline ID- \$PARENT_PIPELINE_ID"
        - log_info "⏰ Generated at- $GENERATION_TIME"
    
    # Analysis job - always included
    dynamic-analyze-changes:
      stage: dynamic-analyze
      script:
        - log_info "🔍 Analyzing changes for dynamic pipeline"
        - log_debug "Commit SHA- \$CI_COMMIT_SHA"
        - log_debug "Branch- \$CI_COMMIT_REF_NAME"
        - git diff --name-only HEAD~1 HEAD || log_warn "No previous commit to compare"
      artifacts:
        paths:
          - change-analysis.txt
        expire_in: 1 hour
    EOF
    
    # Function to add job to pipeline
    add_job() {
        local job_name=$1
        local stage=$2
        local script_content=$3
        local needs=${4:-""}
        
        cat >> $PIPELINE_FILE << EOF
    
    ${job_name}:
      stage: ${stage}
      script:
        ${script_content}
    EOF
    
        if [ ! -z "$needs" ]; then
            cat >> $PIPELINE_FILE << EOF
      needs:
        - $needs
    EOF
        fi
    }
    
    # Check for different types of changes and add corresponding jobs
    log_info "📁 Analyzing repository changes..."
    
    # Check for frontend changes
    if [ -d "frontend" ] || ls *.html *.css *.js 2>/dev/null || [ -f "package.json" ]; then
        log_info "🎨 Frontend changes detected, adding frontend jobs..."
        
        add_job "dynamic-build-frontend" "dynamic-build" \
            "- log_info '🎨 Building frontend components dynamically'
        - mkdir -p dynamic-build/frontend
        - echo 'Frontend built dynamically' > dynamic-build/frontend/app.js
        - log_info '✅ Frontend build completed'" \
            "dynamic-analyze-changes"
        
        cat >> $PIPELINE_FILE << EOF
      artifacts:
        paths:
          - dynamic-build/frontend/
        expire_in: 30 minutes
    EOF
    
        add_job "dynamic-test-frontend" "dynamic-test" \
            "- log_info '🧪 Testing frontend components'
        - log_debug 'Running frontend tests...'
        - log_info '✅ Frontend tests passed'" \
            "dynamic-build-frontend"
    fi
    
    # Check for backend changes
    if [ -d "backend" ] || ls *.py *.java *.go 2>/dev/null || [ -f "requirements.txt" ] || [ -f "pom.xml" ]; then
        log_info "⚙️ Backend changes detected, adding backend jobs..."
        
        add_job "dynamic-build-backend" "dynamic-build" \
            "- log_info '⚙️ Building backend services dynamically'
        - mkdir -p dynamic-build/backend
        - echo 'Backend API ready' > dynamic-build/backend/app.jar
        - log_info '✅ Backend build completed'" \
            "dynamic-analyze-changes"
        
        cat >> $PIPELINE_FILE << EOF
      artifacts:
        paths:
          - dynamic-build/backend/
        expire_in: 30 minutes
    EOF
    
        add_job "dynamic-test-backend" "dynamic-test" \
            "- log_info '🧪 Testing backend services'
        - log_debug 'Running API tests...'
        - log_debug 'Running database tests...'
        - log_info '✅ Backend tests passed'" \
            "dynamic-build-backend"
    fi
    
    # Check for infrastructure changes
    if [ -d "infrastructure" ] || ls Dockerfile* docker-compose*.yml 2>/dev/null || [ -d "kubernetes" ] || [ -d "terraform" ]; then
        log_info "🏗️ Infrastructure changes detected, adding infrastructure jobs..."
        
        add_job "dynamic-build-infrastructure" "dynamic-build" \
            "- log_info '🏗️ Processing infrastructure changes'
        - log_debug 'Validating Docker configurations...'
        - log_debug 'Checking Kubernetes manifests...'
        - log_info '✅ Infrastructure validation completed'" \
            "dynamic-analyze-changes"
        
        add_job "dynamic-deploy-infrastructure" "dynamic-deploy" \
            "- log_info '🚀 Deploying infrastructure changes'
        - log_debug 'This would deploy infrastructure updates'
        - log_info '✅ Infrastructure deployment completed'" \
            "dynamic-build-infrastructure"
    fi
    
    # Check if it's a main branch - add production deployment
    if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        log_info "🎯 Main branch detected, adding production deployment..."
        
        add_job "dynamic-deploy-production" "dynamic-deploy" \
            "- log_info '🚀 Production deployment (dynamically generated)'
        - log_debug 'Deploying to production environment...'
        - log_debug 'Running smoke tests...'
        - log_info '✅ Production deployment completed'"
        
        cat >> $PIPELINE_FILE << EOF
      rules:
        - if: \$CI_COMMIT_BRANCH == \$CI_DEFAULT_BRANCH
          when: manual
      environment:
        name: production-dynamic
        url: https://prod-dynamic.example.com
    EOF
    fi
    
    # Add a summary job that runs always
    cat >> $PIPELINE_FILE << 'EOF'
    
    dynamic-pipeline-summary:
      stage: dynamic-deploy
      script:
        - log_info "📊 Dynamic Pipeline Summary"
      rules:
        - when: always
    EOF
    
    log_info "✅ Dynamic child pipeline configuration generated- $PIPELINE_FILE"
    log_debug "📄 Pipeline content:"
    log_debug "----------------------------------------"
    cat $PIPELINE_FILE
    log_debug "----------------------------------------"
    
    # Validate the generated YAML (if yamllint is available)
    if command -v yamllint >/dev/null 2>&1; then
        log_info "🔍 Validating generated YAML..."
        if yamllint $PIPELINE_FILE; then
            log_info "✅ YAML validation passed"
        else
            log_warn "⚠️ YAML validation warnings"
        fi
    else
        log_warn "ℹ️ yamllint not available, skipping YAML validation"
    fi
    
    log_info "🎉 Dynamic pipeline generation completed!"

# Add component stages
component-validate-syntax:
  stage: $[[ inputs.stage | split(',') | first ]]
  script:
    - eval "$ECHO_FUNCTIONS"
    - log_info "🚀 Pipeline started - ID- $CI_PIPELINE_ID"
    - log_info "Validating YAML syntax and basic checks"
    - log_debug "Checking for required files..."
    - ls -la
    - log_info "✅ Validation complete"
  rules:
    - if: '$[[ inputs.enable_validation ]]' == "true"
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

component-backend-build:
  stage: $[[ inputs.stage | split(',') | index(1) | default("build") ]]
  script:
    - eval "$ECHO_FUNCTIONS"
    - log_info "🔨 Building backend API"
    - mkdir -p dist/backend
    - echo "Backend API ready" > dist/backend/app.jar
    - log_info "✅ Backend API build completed"
  artifacts:
    paths:
      - dist/backend/
    expire_in: 1 hour
  rules:
    - if: '$[[ inputs.enable_backend_build ]]' == "true"
      changes:
        - "backend/**/*"
        - "requirements.txt"
      when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

component-generate-child-pipeline:
  stage: $[[ inputs.stage | split(',') | last | default("maintenance") ]]
  image: $[[ inputs.docker_image ]]
  script:
    - eval "$ECHO_FUNCTIONS"
    - log_info "📋 Generating dynamic child pipeline configuration"
    - log_debug "Working directory- $(pwd)"
    - log_debug "Project directory- $CI_PROJECT_DIR"
    - ls -la $CI_PROJECT_DIR/
    - apt-get update && apt-get install -y dos2unix
    # Create and execute the embedded script
    - echo "$CHILD_PIPELINE_GENERATOR_SCRIPT" > /tmp/generate-child-pipeline.sh
    - chmod +x /tmp/generate-child-pipeline.sh
    - /tmp/generate-child-pipeline.sh
    - log_info "Verifying generated artifact"
    - ls -la $CI_PROJECT_DIR/generated-child-pipeline.yml
    - log_debug "Artifact content preview-"
    - head -20 $CI_PROJECT_DIR/generated-child-pipeline.yml
  artifacts:
    paths:
      - generated-child-pipeline.yml
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

component-trigger-dynamic-child:
  stage: $[[ inputs.stage | split(',') | last | default("maintenance") ]]
  trigger:
    include:
      - artifact: generated-child-pipeline.yml
        job: component-generate-child-pipeline
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    CHILD_TYPE: "dynamic"
  needs:
    - job: component-generate-child-pipeline
      artifacts: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"